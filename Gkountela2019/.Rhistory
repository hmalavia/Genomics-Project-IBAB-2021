writeCsv(br11EpiDown)
writeCsv <- function(br){
df <- deparse(substitute(br))
write.csv(br,paste0("scran_results/",df,".csv",sep=""),row.names = F,quote = F)
}
writeCsv(br11EpiDown)
writeCsv(br11EpiUp)
writeCsv(br7EpiDown)
writeCsv(br7EpiUp)
writeCsv(br16EpiDown)
writeCsv(br16EpiUp)
writeCsv(br61EpiDown)
writeCsv(br61EpiUp)
#### Finding DE EMT genes ####
FindDEemt <- function(br){
epi<- merge(emt,br,by.x = 1,by.y = 1)
writeCsv(epi)
return(epi)
}
br11EMTUp <- FindDEemt(br11UP)
#### Finding DE EMT genes ####
FindDEemt <- function(br){
epi<- merge(emt,br,by.x = 1,by.y = 1)
writeCsv(br)
return(epi)
}
br11EMTUp <- FindDEemt(br11UP)
View(br11EMTUp)
#### Finding DE EMT genes ####
writeEMT <- function(br){
df <- deparse(substitute(br))
write.csv(br,paste0("scran_results/",df,"_emt.csv",sep=""),row.names = F,quote = F)
}
FindDEemt <- function(br){
emt<- merge(emt,br,by.x = 1,by.y = 1)
writeEMT(br)
return(emt)
}
br11EMTUp <- FindDEemt(br11UP)
br11EMTUp <- FindDEemt(br11UP)
br16EMTUp <- FindDEemt(br16Up)
br61EMTUp <- FindDEemt(br61Up)
br7EMTUp <- FindDEemt(br7Up)
br11EMTDown <- FindDEemt(br11Down)
br16EMTDown <- FindDEemt(br16Down)
br61EMTDown <- FindDEemt(br61Down)
br7EMTDown <- FindDEemt(br7Down)
#### Finding DE EMT genes ####
writeEMT <- function(br){
df <- deparse(substitute(br))
write.csv(br,paste0("scran_results/",df,".csv",sep=""),row.names = F,quote = F)
}
writeCsv(br11EMTDown)
writeCsv(br11EMTUp)
writeCsv(br7EMTDown)
writeCsv(br7EMTUp)
writeCsv(br16EMTDown)
writeCsv(br16EMTUp)
writeCsv(br61EMTDown)
writeCsv(br61EMTUp)
#### Venn Diagrams ####
install.packages(“VennDiagram”)
#### Venn Diagrams ####
install.packages(“VennDiagram”)
#### Venn Diagrams ####
install.packages(VennDiagram)
#### Venn Diagrams ####
install.packages('VennDiagram')
#### Venn Diagrams ####
install.packages('ggvenn')
library('ggvenn')
sets <- list('br11'=br11EpiUp,'br16'=br16EpiUp,'br61'=br61EpiUp,'br7'=br7EpiUp)
ggvenn(set)
ggvenn(sets)
ggvenn(sets,show_elements =T,show_percentage = F)
sets <- list('br11'=br11EpiUp[1],'br16'=br16EpiUp[1],'br61'=br61EpiUp[1],'br7'=br7EpiUp[1])
ggvenn(sets,show_elements =T,show_percentage = F)
ggvenn(sets,show_elements =F,show_percentage = F)
sets <- list('br11'=br11EpiUp,'br16'=br16EpiUp,'br61'=br61EpiUp,'br7'=br7EpiUp)
ggvenn(sets,show_elements =F,show_percentage = F)
br11EpiUp[1]
br16EpiUp[1]
br7EpiUp[1]
br61EpiUp[1]
sets <- list('br11'=br11EpiUp[1],'br16'=br16EpiUp[1],'br61'=br61EpiUp[1],'br7'=br7EpiUp[1])
ggvenn(sets,show_elements =F,show_percentage = F)
sets <- data.frame('br11'=br11EpiUp[1],'br16'=br16EpiUp[1],'br61'=br61EpiUp[1],'br7'=br7EpiUp[1])
sets <- list('br11'=br11EpiUp[1],'br16'=br16EpiUp[1],'br61'=br61EpiUp[1],'br7'=br7EpiUp[1])
View(sets)
ggvenn(sets,show_elements =F,show_percentage = F)
sets <- list('br11'=br11EpiUp[1],'br16'=br16EpiUp[1],'br61'=br61EpiUp[1],'br7'=br7EpiUp[1])
ggvenn(sets,show_elements =F,show_percentage = F)
sets <- list('br11'=length(br11EpiUp[1]),'br16'=length(br16EpiUp[1]),'br61'=length(br61EpiUp[1]),'br7'=lengt(br7EpiUp[1]))
sets <- list('br11'=length(br11EpiUp[1]),'br16'=length(br16EpiUp[1]),'br61'=length(br61EpiUp[1]),'br7'=length(br7EpiUp[1]))
ggvenn(sets,show_elements =F,show_percentage = F)
ggvenn(sets)
sets <- list('br11'=br11EpiUp,'br16'=br16EpiUp,'br61'=br61EpiUp,'br7'=br7EpiUp)
ggvenn(sets)
br61Up <- read.csv('scran_results/Br61_upregulated_genes_ALL_edgeR.csv')
library('scran')
library('scater')
library('edgeR')
counts <- read.csv('Gkountela_Patient_unprocessed_rawcounts.csv')
rownames(counts) <- counts$Geneid
counts <- counts[,2:ncol(counts)]
counts <- as.matrix(counts)
head(counts)
samples <- grep('Br11',colnames(counts))
br11 <- counts[,samples]
br11
coldata <- read.csv('Gkountela_coldata.csv')
rownames(coldata) <- coldata$X
coldata <- coldata[,2:ncol(coldata)]
coldata
coldata11 <- coldata[samples,]
coldata11
coldata11 <- coldata11[order(coldata11$Sample_Type),]
coldataCopy <- coldata11
generate_SampleID <- function(cd){
k=1
for (i in 1:nrow(cd)){
if (i != nrow(cd)){
if (cd$Sample_Type[i] == cd$Sample_Type[i+1]){
type <- cd$Sample_Type[i]
cd$Sample_ID[i] = paste(type,k,sep ="_" )
k=k+1
} else {
cd$Sample_ID[i] = paste(type,k,sep ="_" )
k=1
next
}
}
else{
cd$Sample_ID[i] = paste(type,k,sep ="_" )
}
}
return(cd)
}
View(coldata11)
coldata11 <- generate_SampleID(coldata11)
View(coldata11)
sce <- SingleCellExperiment(assays = list(counts = br11),colData = coldata11)
sce$Sample_Type <- factor(sce$Sample_Type)
sce$Donor <- factor(sce$Donor)
sce@colData
spikes <- grep(rownames(br11),pattern = "^ERCC-",value = T)
spikecounts <- br11[spikes,]
spikein <- SummarizedExperiment(list(counts=spikecounts))
altExp(sce,'spikes') <- spikein
qc <- perCellQCMetrics(sce)
qc
reasons <- quickPerCellQC(qc,sub.fields='altexps_spikes_percent')
colSums(as.matrix(reasons))
unfiltered <- sce
colData(unfiltered) <- cbind(colData(unfiltered),qc)
colData(unfiltered)
unfiltered$discard <- reasons$discard
colData(unfiltered[,unfiltered$discard])
sce <- sce[,!unfiltered$discard]
set.seed(100)
lib.sf <- librarySizeFactors(sce)
summary(lib.sf)
sce <- logNormCounts(sce,size.factors=lib.sf)
assays(sce)
sce.hvgs <- modelGeneVarWithSpikes(sce,'spikes')
sce.hvgs[order(sce.hvgs$bio,decreasing=T),]
groups <- c(1,1,2,2,2,2,2,2,2,2,2)
y <- DGEList(counts(sce.hvgs),samples=colData(sce.hvgs),group = groups )
sce.hvgs <- modelGeneVarWithSpikes(sce,'spikes')
sce.hvgs[order(sce.hvgs$bio,decreasing=T),]
chosen.hvgs <- getTopHVGs(sce.hvgs,var.field = 'bio',var.threshold = 1,row.names = T)
length(chosen.hvgs)
sce.hvgs <- sce[chosen.hvgs,]
groups <- c(1,1,2,2,2,2,2,2,2,2,2)
y <- DGEList(counts(sce.hvgs),samples=colData(sce.hvgs),group = groups )
y <- calcNormFactors(y)
y <- estimateDisp(y)
et <- exactTest(y)
toptags <- topTags(et)
result <- et$table
result <- result[order(-result$logFC),]
write.csv(result,'Br11_edgeR_result.csv',quote = F,row.names = F)
upreg <- result[result$logFC > 2,]
Sigup <- result[result$logFC > 2 & result$PValue < 0.05,]
Downregs <- result[result$logFC < -2,]
SigDown <- result[result$logFC < -2 &  result$PValue < 0.05,]
br7 <- read.csv('Br7_edgeR_result.csv')
upreg <- br7[br7$logFC>1,]
upreg <- br7[br7$logFC>=1,]
upregsig <- br7[br7$logFC >=1 & br7$PValue < 0.05,]
downreg <- br7[br7$logFC <= -1,]
downregsig <- br7[br7$logFC <= -1 & br7$PValue < 0.05,]
library('scran')
library('scater')
library('edgeR')
counts <- read.csv('Gkountela_Patient_unprocessed_rawcounts.csv')
rownames(counts) <- counts$Geneid
counts <- counts[,2:ncol(counts)]
counts <- as.matrix(counts)
head(counts)
samples <- grep('Br7',colnames(counts))
br7 <- counts[,samples]
br7
coldata <- read.csv('Gkountela_coldata.csv')
rownames(coldata) <- coldata$X
coldata <- coldata[,2:ncol(coldata)]
coldata
coldata7 <- coldata[samples,]
coldata7
coldata7 <- coldata7[order(coldata7$Sample_Type),]
generate_SampleID <- function(cd){
k=1
for (i in 1:nrow(cd)){
if (i != nrow(cd)){
if (cd$Sample_Type[i] == cd$Sample_Type[i+1]){
type <- cd$Sample_Type[i]
cd$Sample_ID[i] = paste(type,k,sep ="_" )
k=k+1
} else {
cd$Sample_ID[i] = paste(type,k,sep ="_" )
k=1
next
}
}
else{
cd$Sample_ID[i] = paste(type,k,sep ="_" )
}
}
return(cd)
}
coldata7 <- generate_SampleID(coldata7)
View(coldata7)
sce <- SingleCellExperiment(assays = list(counts = br7),colData = coldata7)
sce$Sample_Type <- factor(sce$Sample_Type)
sce$Donor <- factor(sce$Donor)
spikes <- grep(rownames(br7),pattern = "^ERCC-",value = T)
spikecounts <- br7[spikes,]
spikein <- SummarizedExperiment(list(counts=spikecounts))
altExp(sce,'spikes') <- spikein
qc <- perCellQCMetrics(sce)
#qc
reasons <- quickPerCellQC(qc,sub.fields='altexps_spikes_percent')
colSums(as.matrix(reasons))
unfiltered <- sce
colData(unfiltered) <- cbind(colData(unfiltered),qc)
colData(unfiltered)
unfiltered$discard <- reasons$discard
sce <- sce[,!unfiltered$discard]
set.seed(100)
lib.sf <- librarySizeFactors(sce)
summary(lib.sf)
sce <- logNormCounts(sce,size.factors=lib.sf)
assays(sce)
sce.hvgs <- modelGeneVarWithSpikes(sce,'spikes')
sce.hvgs[order(sce.hvgs$bio,decreasing=T),]
sce.hvgs <- sce[chosen.hvgs,]
library('edgeR')
sce.hvgs$Sample_ID
groups <- c(1,1,2,2)
y <- DGEList(counts(sce.hvgs),samples=colData(sce.hvgs),group = groups )
sce.hvgs <- sce[chosen.hvgs,]
chosen.hvgs <- getTopHVGs(sce.hvgs,var.field = 'bio',var.threshold = 1,row.names = T)
sce.hvgs <- sce[chosen.hvgs,]
library('edgeR')
sce.hvgs$Sample_ID
groups <- c(1,1,2,2)
y <- DGEList(counts(sce.hvgs),samples=colData(sce.hvgs),group = groups )
y <- calcNormFactors(y)
length(y$samples)
y <- estimateDisp(y)
et <- exactTest(y)
toptags <- topTags(et)
toptags
result <- et$table
result <- result[order(-result$logFC),]
write.csv(result,'Br7_edgeR_result.csv',quote=F)
upreg <- result[result$logFC > 1,]
upregsig <- upreg[upreg$PValue <= 0.05,]
Downregs <- result[result$logFC < -1,]
Downregsig <- Downregs[Downregs$PValue <= 0.05,]
View(Downregsig)
counts <- read.csv('Gkountela_Patient_unprocessed_rawcounts.csv')
rownames(counts) <- counts$Geneid
counts <- counts[,2:ncol(counts)]
counts <- as.matrix(counts)
#head(counts)
samples <- grep('Br11',colnames(counts))
br11 <- counts[,samples]
coldata <- read.csv('Gkountela_coldata.csv')
rownames(coldata) <- coldata$X
coldata <- coldata[,2:ncol(coldata)]
coldata11 <- coldata[samples,]
coldata11 <- coldata11[order(coldata11$Sample_Type),]
generate_SampleID <- function(cd){
k=1
for (i in 1:nrow(cd)){
if (i != nrow(cd)){
if (cd$Sample_Type[i] == cd$Sample_Type[i+1]){
type <- cd$Sample_Type[i]
cd$Sample_ID[i] = paste(type,k,sep ="_" )
k=k+1
} else {
cd$Sample_ID[i] = paste(type,k,sep ="_" )
k=1
next
}
}
else{
cd$Sample_ID[i] = paste(type,k,sep ="_" )
}
}
return(cd)
}
coldata11 <- generate_SampleID(coldata11)
sce <- SingleCellExperiment(assays = list(counts = br11),colData = coldata11)
sce$Sample_Type <- factor(sce$Sample_Type)
sce$Donor <- factor(sce$Donor)
spikes <- grep(rownames(br11),pattern = "^ERCC-",value = T)
spikecounts <- br11[spikes,]
spikein <- SummarizedExperiment(list(counts=spikecounts))
altExp(sce,'spikes') <- spikein
qc <- perCellQCMetrics(sce)
#qc
reasons <- quickPerCellQC(qc,sub.fields='altexps_spikes_percent')
colSums(as.matrix(reasons))
unfiltered <- sce
colData(unfiltered) <- cbind(colData(unfiltered),qc)
unfiltered$discard <- reasons$discard
sce <- sce[,!unfiltered$discard]
set.seed(100)
lib.sf <- librarySizeFactors(sce)
summary(lib.sf)
sce <- logNormCounts(sce,size.factors=lib.sf)
sce.hvgs <- modelGeneVarWithSpikes(sce,'spikes')
sce.hvgs[order(sce.hvgs$bio,decreasing=T),]
chosen.hvgs <- getTopHVGs(sce.hvgs,var.field = 'bio',var.threshold = 1,row.names = T)
sce.hvgs <- sce[chosen.hvgs,]
sce.hvgs$Sample_ID
groups <- c(1,1,2,2,2,2,2,2,2,2,2)
y <- DGEList(counts(sce.hvgs),samples=colData(sce.hvgs),group = groups )
y <- calcNormFactors(y)
#length(y$samples)
#sce.hvgs$sizeFactor
y <- estimateDisp(y)
et <- exactTest(y)
toptags <- topTags(et)
result <- et$table
result <- result[order(-result$logFC),]
write.csv(result,'Br11_edgeR_result.csv',quote = F,row.names = F)
upreg <- result[result$logFC > 1,]
Sigup <- result[result$logFC > 1 & result$PValue < 0.05,]
Sigup <- result[result$logFC > 2 & result$PValue < 0.05,]
Sigup <- result[result$logFC >= 1 & result$PValue < 0.05,]
Downregs <- result[result$logFC =< -1,]
Downregs <- result[result$logFC <= -1,]
SigDown <- result[result$logFC <= -1 &  result$PValue < 0.05,]
ounts <- read.csv('Gkountela_Patient_unprocessed_rawcounts.csv')
rownames(counts) <- counts$Geneid
counts <- counts[,2:ncol(counts)]
counts <- as.matrix(counts)
head(counts)
samples <- grep('Br16',colnames(counts))
br16 <- counts[,samples]
counts <- read.csv('Gkountela_Patient_unprocessed_rawcounts.csv')
rownames(counts) <- counts$Geneid
counts <- counts[,2:ncol(counts)]
counts <- as.matrix(counts)
head(counts)
samples <- grep('Br16',colnames(counts))
br16 <- counts[,samples]
coldata <- read.csv('Gkountela_coldata.csv')
rownames(coldata) <- coldata$X
coldata <- coldata[,2:ncol(coldata)]
coldata
coldata16 <- coldata[samples,]
coldata16
coldata16 <- coldata16[order(coldata16$Sample_Type),]
generate_SampleID <- function(cd){
k=1
for (i in 1:nrow(cd)){
if (i != nrow(cd)){
if (cd$Sample_Type[i] == cd$Sample_Type[i+1]){
type <- cd$Sample_Type[i]
cd$Sample_ID[i] = paste(type,k,sep ="_" )
k=k+1
} else {
cd$Sample_ID[i] = paste(type,k,sep ="_" )
k=1
next
}
}
else{
cd$Sample_ID[i] = paste(type,k,sep ="_" )
}
}
return(cd)
}
coldata16 <- generate_SampleID(coldata16)
sce <- SingleCellExperiment(assays = list(counts = br16),colData = coldata16)
sce$Sample_Type <- factor(sce$Sample_Type)
sce$Donor <- factor(sce$Donor)
spikes <- grep(rownames(br16),pattern = "^ERCC-",value = T)
spikecounts <- br16[spikes,]
spikein <- SummarizedExperiment(list(counts=spikecounts))
altExp(sce,'spikes') <- spikein
qc <- perCellQCMetrics(sce)
reasons <- quickPerCellQC(qc,sub.fields='altexps_spikes_percent')
colSums(as.matrix(reasons))
unfiltered <- sce
colData(unfiltered) <- cbind(colData(unfiltered),qc)
colData(unfiltered)
unfiltered$discard <- reasons$discard
colData(unfiltered[,unfiltered$discard])[1,ncol(colData(unfiltered))] = F
colData(sce[,unfiltered$discard])
sce <- sce[,!unfiltered$discard]
sce
stats <- perCellQCMetrics(sce)
colData(sce) <- cbind(colData(sce),stats)
set.seed(100)
lib.sf <- librarySizeFactors(sce)
summary(lib.sf)
sce <- logNormCounts(sce,size.factors=lib.sf)
assays(sce)
sce.hvgs <- modelGeneVarWithSpikes(sce,'spikes')
sce.hvgs[order(sce.hvgs$bio,decreasing=T),]
chosen.hvgs <- getTopHVGs(sce.hvgs,var.field = 'bio',var.threshold = 1,row.names = T)
length(chosen.hvgs)
sce.hvgs <- sce[chosen.hvgs,]
sce.hvgs
sce.hvgs$Sample_ID
groups <- c(1,1,1,2,2)
y <- DGEList(counts(sce.hvgs),samples=colData(sce.hvgs),group = groups )
nrow(y$samples['Sample_Name'])
y <- calcNormFactors(y)
length(y$samples)
sce.hvgs$sizeFactor
ncol(y)
y <- estimateDisp(y)
et <- exactTest(y)
toptags <- topTags(et)
toptags
result <- et$table
write.csv(result,'Br61_edgeR_result.csv',quote = F,row.names = F)
upreg <- result[result$logFC >= 1,]
upregsig <- upreg[upreg$PValue <= 0.05,]
Downregs <- result[result$logFC <= -1,]
Downregsig <- Downregs[Downregs$PValue <= 0.05,]
counts <- read.csv('Gkountela_Patient_unprocessed_rawcounts.csv')
rownames(counts) <- counts$Geneid
counts <- counts[,2:ncol(counts)]
counts <- as.matrix(counts)
head(counts)
br61 <- grep(colnames(counts),'Br61')
br61 <- counts[,grep('Br61',colnames(counts))]
br61
coldata <- read.csv('coldata61.csv')
rownames(coldata) <- coldata$X
coldata <- coldata[,2:ncol(coldata)]
coldata
sce <- SingleCellExperiment(assays = list(counts = br61),colData = coldata)
sce$Sample_Type <- factor(sce$Sample_Type)
sce$Donor <- factor(sce$Donor)
sce@colData
spikes <- grep(rownames(br61),pattern = "^ERCC-",value = T)
spikecounts <- br61[spikes,]
spikein <- SummarizedExperiment(list(counts=spikecounts))
altExp(sce,'spikes') <- spikein
qc <- perCellQCMetrics(sce)
qc
reasons <- quickPerCellQC(qc,sub.fields='altexps_spikes_percent')
colSums(as.matrix(reasons))
unfiltered <- sce
colData(unfiltered) <- cbind(colData(unfiltered),qc)
colData(unfiltered)
unfiltered$discard <- reasons$discard
colData(unfiltered[,unfiltered$discard])
colData(unfiltered[,unfiltered$discard])[1,ncol(colData(unfiltered))] = F
sce <- sce[,!unfiltered$discard]
stats <- perCellQCMetrics(sce)
colData(sce) <- cbind(colData(sce),stats)
set.seed(100)
lib.sf <- librarySizeFactors(sce)
summary(lib.sf)
sce <- logNormCounts(sce,size.factors=lib.sf)
assays(sce)
sce.hvgs <- modelGeneVarWithSpikes(sce,'spikes')
sce.hvgs[order(sce.hvgs$bio,decreasing=T),]
chosen.hvgs <- getTopHVGs(sce.hvgs,var.field = 'bio',var.threshold = 1,row.names = T)
sce.hvgs <- sce[chosen.hvgs,]
sce.hvgs
counts61 <- counts(sce.hvgs)
groups <- c(1,1,1,1,1,1,1,2,2,2,2,2)
y <- DGEList(counts61,samples=colData(sce.hvgs),group = groups )
y$counts
nrow(y$samples['Sample_Name'])
y <- calcNormFactors(y)
length(y$samples)
sce.hvgs$sizeFactor
ncol(y)
y <- estimateDisp(y)
et <- exactTest(y)
toptags <- topTags(et)
toptags
result <- et$table
result <- result[order(-result$logFC),]
write.csv(result,'Br61_edgeR_result.csv',quote = F,row.names = F)
upreg <- result[result$logFC >= 1,]
Sigup <- upreg[upreg$PValue < 0.05,]
Downregs <- result[result$logFC < -1,]
Downregs <- result[result$logFC =< -1,]
Downregs <- result[result$logFC <= -1,]
SigDown <- result[result$logFC <= -1 &  result$PValue < 0.05,]
