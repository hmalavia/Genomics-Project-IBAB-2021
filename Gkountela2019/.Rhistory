data("ssp2006.robust")
subtypePredictions_ssp2006 <- molecular.subtyping(sbt.model = 'ssp2006',data = count_data,annot = annot,do.mapping = T,verbose = T)
subtypePredictions_pam50 <- molecular.subtyping(sbt.model = 'pam50',data = count_data,annot = annot,do.mapping = T,verbose = T)
subtypePredictions_pam50 <- molecular.subtyping(sbt.model = 'scmgene',data = count_data,annot = annot,do.mapping = T,verbose = T)
write.csv(sampledata,'br61_molecular_subtypes_genefu.csv',quote = F)
counts <- read.csv('Gkountela_Patient_unprocessed_rawcounts.csv')
rownames(counts) <- counts$Geneid
counts <- counts[,2:ncol(counts)]
counts <- as.matrix(counts)
samples <- grep('Br11',colnames(counts))
br11 <- counts[,samples]
br11_new <- counts[,rownames(samples_new)]
coldata <- read.csv('Gkountela_coldata.csv')
rownames(coldata) <- coldata$X
coldata <- coldata[,2:ncol(coldata)]
coldata11_new <- coldata[rownames(samples_new),]
coldata11 <- coldata11[order(coldata11$Sample_Type),]
generate_SampleID <- function(cd){
k=1
for (i in 1:nrow(cd)){
if (i != nrow(cd)){
if (cd$Sample_Type[i] == cd$Sample_Type[i+1]){
type <- cd$Sample_Type[i]
cd$Sample_ID[i] = paste(type,k,sep ="_" )
k=k+1
} else {
cd$Sample_ID[i] = paste(type,k,sep ="_" )
k=1
next
}
}
else{
cd$Sample_ID[i] = paste(type,k,sep ="_" )
}
}
return(cd)
}
coldata11_new <- generate_SampleID(coldata11_new)
library('genefu')
library('ensembldb')
library('EnsDb.Hsapiens.v86')
data(scmod2.robust)
data(pam50.robust)
data(scmgene.robust)
data(sig.ggi)
data(scmod1.robust)
data(sig.genius)
data("ssp2006.robust")
#### Loading count Data ####
count_data <- read.csv('br61_scran_norm_counts.csv',row.names = 'X')
sum <- rowSums(count_data)
count_data$sum <- sum
my.symbols <- rownames(count_data)
edb <- EnsDb.Hsapiens.v86
entrez_ids <- select(edb,
keys = my.symbols,
columns = c("ENTREZID", "SYMBOL"),
keytype = "SYMBOL")
count_data <- merge(count_data,entrez_ids,by.x=0,by.y='SYMBOL')
count_data <- count_data[order(-count_data$sum),]
count_data <- count_data[!duplicated(count_data$Row.names),]
annot <- subset(count_data,select=c('Row.names','ENTREZID'))
colnames(annot)[2] <- 'EntrezGene.ID'
colnames(annot)[1] <- 'Gene.Symbol'
rownames(annot) <- annot$Gene.Symbol
rownames(count_data) <- count_data$Row.names
count_data <- count_data[,2:(ncol(count_data)-2)]
count_data <- t(count_data)
subtypePredictions_scmod1 <- molecular.subtyping(sbt.model = 'scmod1',data = count_data,annot = annot,do.mapping = T,verbose = T)
subtypePredictions_scmod2 <- molecular.subtyping(sbt.model = 'scmod2',data = count_data,annot = annot,do.mapping = T,verbose = T)
Basals1<-names(which(subtypePredictions_scmod1$subtype == "ER-/HER2-"))
#Select samples pertaining to HER2 Subtype
HER2s1<-names(which(subtypePredictions_scmod1$subtype == "HER2+"))
#Select samples pertaining to Luminal Subtypes
LuminalB1<-names(which(subtypePredictions_scmod1$subtype == "ER+/HER2- High Prolif"))
LuminalA1<-names(which(subtypePredictions_scmod1$subtype == "ER+/HER2- Low Prolif"))
Basals2<-names(which(subtypePredictions_scmod2$subtype == "ER-/HER2-"))
#Select samples pertaining to HER2 Subtype
HER2s2<-names(which(subtypePredictions_scmod2$subtype == "HER2+"))
#Select samples pertaining to Luminal Subtypes
LuminalB2<-names(which(subtypePredictions_scmod2$subtype == "ER+/HER2- High Prolif"))
LuminalA2<-names(which(subtypePredictions_scmod2$subtype == "ER+/HER2- Low Prolif"))
sampledata <- read.csv('br61_scran_filtered_coldata.csv')
rownames(sampledata) <- sampledata$X
sampledata <- sampledata[,2:ncol(sampledata)]
sampledata$scmod1 <- ""
sampledata[Basals1,]$scmod1 <- 'basal'
sampledata[HER2s1,]$scmod1 <- 'her2'
sampledata[LuminalA1,]$scmod1 <- 'lumA'
sampledata[LuminalB1,]$scmod1 <- 'lumB'
sampledata$scmod2 <- ""
sampledata[Basals2,]$scmod2 <- 'basal'
sampledata[HER2s2,]$scmod2 <- 'her2'
sampledata[LuminalA2,]$scmod2 <- 'lumA'
sampledata[LuminalB2,]$scmod2 <- 'lumB'
View(sampledata)
write.csv(sampledata,'br61_molecular_subtypes_genefu.csv',quote = F)
library('scran')
library('scater')
library('edgeR')
counts <- read.csv('Gkountela_Patient_unprocessed_rawcounts.csv')
rownames(counts) <- counts$Geneid
counts <- counts[,2:ncol(counts)]
counts <- as.matrix(counts)
samples <- grep('Br11',colnames(counts))
br11 <- counts[,samples]
coldata <- read.csv('Gkountela_coldata.csv')
rownames(coldata) <- coldata$X
coldata <- coldata[,2:ncol(coldata)]
coldata11 <- coldata[rownames(samples_new),]
br11_new <- counts[,rownames(samples)]
counts <- read.csv('Gkountela_Patient_unprocessed_rawcounts.csv')
rownames(counts) <- counts$Geneid
counts <- counts[,2:ncol(counts)]
counts <- as.matrix(counts)
samples <- grep('Br11',colnames(counts))
br11 <- counts[,samples]
coldata <- read.csv('Gkountela_coldata.csv')
rownames(coldata) <- coldata$X
coldata <- coldata[,2:ncol(coldata)]
coldata11 <- coldata[rownames(samples_new),]
coldata11 <- coldata11[order(coldata11$Sample_Type),]
coldata11 <- coldata[samples,]
coldata11 <- coldata11[order(coldata11$Sample_Type),]
generate_SampleID <- function(cd){
k=1
for (i in 1:nrow(cd)){
if (i != nrow(cd)){
if (cd$Sample_Type[i] == cd$Sample_Type[i+1]){
type <- cd$Sample_Type[i]
cd$Sample_ID[i] = paste(type,k,sep ="_" )
k=k+1
} else {
cd$Sample_ID[i] = paste(type,k,sep ="_" )
k=1
next
}
}
else{
cd$Sample_ID[i] = paste(type,k,sep ="_" )
}
}
return(cd)
}
coldata11_new <- generate_SampleID(coldata11_new)
coldata11 <- generate_SampleID(coldata11)
View(coldata11)
#write.csv(coldata11,'coldata11.csv',quote = F)
#### Remove outliers ####
out <- c("CTC-single_2","CTC-single_3","CTC-single_4")
coldata11 <- coldata11[!coldata11$Sample_ID %in% out,]
View(coldata11)
br11 <- br11[,rownames(coldata11)]
View(br11)
sce <- SingleCellExperiment(assays = list(counts = br11),colData = coldata11)
sce$Sample_Type <- factor(sce$Sample_Type)
sce$Donor <- factor(sce$Donor)
sce@colData
spikes <- grep(rownames(br11),pattern = "^ERCC-",value = T)
spikecounts <- br11[spikes,]
spikein <- SummarizedExperiment(list(counts=spikecounts))
altExp(sce,'spikes') <- spikein
qc <- perCellQCMetrics(sce)
reasons <- quickPerCellQC(qc,sub.fields='altexps_spikes_percent')
colSums(as.matrix(reasons))
unfiltered <- sce
colData(unfiltered) <- cbind(colData(unfiltered),qc)
unfiltered$discard <- reasons$discard
colData(unfiltered[,unfiltered$discard])
sce[,unfiltered$discard]
sce <- sce[,!unfiltered$discard]
stats <- perCellQCMetrics(sce)
colData(sce) <- cbind(colData(sce),stats)
#### Normalization ####
set.seed(100)
lib.sf <- librarySizeFactors(sce)
sce <- logNormCounts(sce,size.factors=lib.sf)
assays(sce)
sce.hvgs <- modelGeneVarWithSpikes(sce,'spikes')
sce.hvgs[order(sce.hvgs$bio,decreasing=T),]
chosen.hvgs <- getTopHVGs(sce.hvgs,var.field = 'bio',var.threshold = 1,row.names = T)
sce.hvgs <- sce[chosen.hvgs,]
br11_norm_counts <- logcounts(sce)
View(br11_norm_counts)
write.csv(br11_norm_counts,'br11_scran_norm_counts.csv',quote=F)
coldata_filtered <- as.data.frame(colData(sce))
View(coldata_filtered)
coldata_filtered <- coldata_filtered[,2:7]
write.csv(coldata_filtered,'br11_filtered_coldata.csv',quote=F)
count_data <- read.csv('br11_scran_norm_counts.csv',row.names = 'X')
View(count_data)
sum <- rowSums(count_data)
count_data$sum <- sum
my.symbols <- rownames(count_data)
edb <- EnsDb.Hsapiens.v86
entrez_ids <- select(edb,
keys = my.symbols,
columns = c("ENTREZID", "SYMBOL"),
keytype = "SYMBOL")
count_data <- merge(count_data,entrez_ids,by.x=0,by.y='SYMBOL')
count_data <- count_data[order(-count_data$sum),]
count_data <- count_data[!duplicated(count_data$Row.names),]
annot <- subset(count_data,select=c('Row.names','ENTREZID'))
colnames(annot)[2] <- 'EntrezGene.ID'
colnames(annot)[1] <- 'Gene.Symbol'
rownames(annot) <- annot$Gene.Symbol
rownames(count_data) <- count_data$Row.names
count_data <- count_data[,2:(ncol(count_data)-2)]
count_data <- t(count_data)
subtypePredictions_scmod1 <- molecular.subtyping(sbt.model = 'scmod1',data = count_data,annot = annot,do.mapping = T,verbose = T)
subtypePredictions_scmod2 <- molecular.subtyping(sbt.model = 'scmod2',data = count_data,annot = annot,do.mapping = T,verbose = T)
Basals1<-names(which(subtypePredictions_scmod1$subtype == "ER-/HER2-"))
#Select samples pertaining to HER2 Subtype
HER2s1<-names(which(subtypePredictions_scmod1$subtype == "HER2+"))
#Select samples pertaining to Luminal Subtypes
LuminalB1<-names(which(subtypePredictions_scmod1$subtype == "ER+/HER2- High Prolif"))
LuminalA1<-names(which(subtypePredictions_scmod1$subtype == "ER+/HER2- Low Prolif"))
Basals2<-names(which(subtypePredictions_scmod2$subtype == "ER-/HER2-"))
#Select samples pertaining to HER2 Subtype
HER2s2<-names(which(subtypePredictions_scmod2$subtype == "HER2+"))
#Select samples pertaining to Luminal Subtypes
LuminalB2<-names(which(subtypePredictions_scmod2$subtype == "ER+/HER2- High Prolif"))
LuminalA2<-names(which(subtypePredictions_scmod2$subtype == "ER+/HER2- Low Prolif"))
sampledata <- read.csv('br11_filtered_coldata.csv')
rownames(sampledata) <- sampledata$X
sampledata <- sampledata[,2:ncol(sampledata)]
View(sampledata)
sampledata$scmod1 <- ""
sampledata[Basals1,]$scmod1 <- 'basal'
sampledata[HER2s1,]$scmod1 <- 'her2'
sampledata[LuminalA1,]$scmod1 <- 'lumA'
sampledata[LuminalB1,]$scmod1 <- 'lumB'
sampledata$scmod2 <- ""
sampledata[Basals2,]$scmod2 <- 'basal'
sampledata[HER2s2,]$scmod2 <- 'her2'
sampledata[LuminalA2,]$scmod2 <- 'lumA'
sampledata[LuminalB2,]$scmod2 <- 'lumB'
write.csv(sampledata,'br11_molecular_subtypes_genefu.csv',quote = F)
subtypePredictions_ssp2006 <- molecular.subtyping(sbt.model = 'ssp2006',data = count_data,annot = annot,do.mapping = T,verbose = T)
subtypePredictions_scmgene <- molecular.subtyping(sbt.model = 'scmgene',data = count_data,annot = annot,do.mapping = T,verbose = T)
Basals3<-names(which(subtypePredictions_scmgene$subtype == "ER-/HER2-"))
#Select samples pertaining to HER2 Subtype
HER2s3<-names(which(subtypePredictions_scmgene$subtype == "HER2+"))
#Select samples pertaining to Luminal Subtypes
LuminalB3<-names(which(subtypePredictions_scmgene$subtype == "ER+/HER2- High Prolif"))
LuminalA3<-names(which(subtypePredictions_scmgene$subtype == "ER+/HER2- Low Prolif"))
#### Loading count Data ####
count_data <- read.csv('br61_scran_norm_counts.csv',row.names = 'X')
sum <- rowSums(count_data)
count_data$sum <- sum
my.symbols <- rownames(count_data)
edb <- EnsDb.Hsapiens.v86
entrez_ids <- select(edb,
keys = my.symbols,
columns = c("ENTREZID", "SYMBOL"),
keytype = "SYMBOL")
count_data <- merge(count_data,entrez_ids,by.x=0,by.y='SYMBOL')
count_data <- count_data[order(-count_data$sum),]
count_data <- count_data[!duplicated(count_data$Row.names),]
annot <- subset(count_data,select=c('Row.names','ENTREZID'))
colnames(annot)[2] <- 'EntrezGene.ID'
colnames(annot)[1] <- 'Gene.Symbol'
rownames(annot) <- annot$Gene.Symbol
rownames(count_data) <- count_data$Row.names
count_data <- count_data[,2:(ncol(count_data)-2)]
count_data <- t(count_data)
subtypePredictions_scmgene <- molecular.subtyping(sbt.model = 'scmgene',data = count_data,annot = annot,do.mapping = T,verbose = T)
Basals3<-names(which(subtypePredictions_scmgene$subtype == "ER-/HER2-"))
#Select samples pertaining to HER2 Subtype
HER2s3<-names(which(subtypePredictions_scmgene$subtype == "HER2+"))
#Select samples pertaining to Luminal Subtypes
LuminalB3<-names(which(subtypePredictions_scmgene$subtype == "ER+/HER2- High Prolif"))
LuminalA3<-names(which(subtypePredictions_scmgene$subtype == "ER+/HER2- Low Prolif"))
sampledata <- read.csv('br61_scran_filtered_coldata.csv')
rownames(sampledata) <- sampledata$X
sampledata <- sampledata[,2:ncol(sampledata)]
#### Loading count Data ####
count_data <- read.csv('br61_scran_norm_counts.csv',row.names = 'X')
sum <- rowSums(count_data)
count_data$sum <- sum
my.symbols <- rownames(count_data)
edb <- EnsDb.Hsapiens.v86
entrez_ids <- select(edb,
keys = my.symbols,
columns = c("ENTREZID", "SYMBOL"),
keytype = "SYMBOL")
count_data <- merge(count_data,entrez_ids,by.x=0,by.y='SYMBOL')
count_data <- count_data[order(-count_data$sum),]
count_data <- count_data[!duplicated(count_data$Row.names),]
annot <- subset(count_data,select=c('Row.names','ENTREZID'))
colnames(annot)[2] <- 'EntrezGene.ID'
colnames(annot)[1] <- 'Gene.Symbol'
rownames(annot) <- annot$Gene.Symbol
rownames(count_data) <- count_data$Row.names
count_data <- count_data[,2:(ncol(count_data)-2)]
count_data <- t(count_data)
subtypePredictions_scmod1 <- molecular.subtyping(sbt.model = 'scmod1',data = count_data,annot = annot,do.mapping = T,verbose = T)
subtypePredictions_scmod2 <- molecular.subtyping(sbt.model = 'scmod2',data = count_data,annot = annot,do.mapping = T,verbose = T)
subtypePredictions_scmgene <- molecular.subtyping(sbt.model = 'scmgene',data = count_data,annot = annot,do.mapping = T,verbose = T)
subtypePredictions_scmod1$subtype
Basals1<-names(which(subtypePredictions_scmod1$subtype == "ER-/HER2-"))
#Select samples pertaining to HER2 Subtype
HER2s1<-names(which(subtypePredictions_scmod1$subtype == "HER2+"))
#Select samples pertaining to Luminal Subtypes
LuminalB1<-names(which(subtypePredictions_scmod1$subtype == "ER+/HER2- High Prolif"))
LuminalA1<-names(which(subtypePredictions_scmod1$subtype == "ER+/HER2- Low Prolif"))
Basals2<-names(which(subtypePredictions_scmod2$subtype == "ER-/HER2-"))
#Select samples pertaining to HER2 Subtype
HER2s2<-names(which(subtypePredictions_scmod2$subtype == "HER2+"))
#Select samples pertaining to Luminal Subtypes
LuminalB2<-names(which(subtypePredictions_scmod2$subtype == "ER+/HER2- High Prolif"))
LuminalA2<-names(which(subtypePredictions_scmod2$subtype == "ER+/HER2- Low Prolif"))
Basals3<-names(which(subtypePredictions_scmgene$subtype == "ER-/HER2-"))
#Select samples pertaining to HER2 Subtype
HER2s3<-names(which(subtypePredictions_scmgene$subtype == "HER2+"))
#Select samples pertaining to Luminal Subtypes
LuminalB3<-names(which(subtypePredictions_scmgene$subtype == "ER+/HER2- High Prolif"))
LuminalA3<-names(which(subtypePredictions_scmgene$subtype == "ER+/HER2- Low Prolif"))
sampledata <- read.csv('br61_scran_filtered_coldata.csv')
rownames(sampledata) <- sampledata$X
sampledata <- sampledata[,2:ncol(sampledata)]
sampledata$scmod1 <- ""
sampledata[Basals1,]$scmod1 <- 'basal'
sampledata[HER2s1,]$scmod1 <- 'her2'
sampledata[LuminalA1,]$scmod1 <- 'lumA'
sampledata[LuminalB1,]$scmod1 <- 'lumB'
sampledata$scmod2 <- ""
sampledata[Basals2,]$scmod2 <- 'basal'
sampledata[HER2s2,]$scmod2 <- 'her2'
sampledata[LuminalA2,]$scmod2 <- 'lumA'
sampledata[LuminalB2,]$scmod2 <- 'lumB'
sampledata$scmgene <- ""
sampledata[Basals3,]$scmod2 <- 'basal'
sampledata[HER2s3,]$scmod2 <- 'her2'
sampledata[LuminalA3,]$scmod2 <- 'lumA'
sampledata[LuminalB3,]$scmod2 <- 'lumB'
sampledata$scmod2 <- ""
sampledata[Basals2,]$scmod2 <- 'basal'
sampledata[HER2s2,]$scmod2 <- 'her2'
sampledata[LuminalA2,]$scmod2 <- 'lumA'
sampledata[LuminalB2,]$scmod2 <- 'lumB'
sampledata$scmgene <- ""
sampledata[Basals3,]$scmgene <- 'basal'
sampledata[HER2s3,]$scmgene <- 'her2'
sampledata[LuminalA3,]$scmgene <- 'lumA'
sampledata[LuminalB3,]$scmgene<- 'lumB'
write.csv(sampledata,'br61_molecular_subtypes_genefu.csv',quote = F)
#######################################################################
#############################BR11######################################
#######################################################################
count_data <- read.csv('br11_scran_norm_counts.csv',row.names = 'X')
sum <- rowSums(count_data)
count_data$sum <- sum
my.symbols <- rownames(count_data)
edb <- EnsDb.Hsapiens.v86
entrez_ids <- select(edb,
keys = my.symbols,
columns = c("ENTREZID", "SYMBOL"),
keytype = "SYMBOL")
count_data <- merge(count_data,entrez_ids,by.x=0,by.y='SYMBOL')
count_data <- count_data[order(-count_data$sum),]
count_data <- count_data[!duplicated(count_data$Row.names),]
annot <- subset(count_data,select=c('Row.names','ENTREZID'))
colnames(annot)[2] <- 'EntrezGene.ID'
colnames(annot)[1] <- 'Gene.Symbol'
rownames(annot) <- annot$Gene.Symbol
rownames(count_data) <- count_data$Row.names
count_data <- count_data[,2:(ncol(count_data)-2)]
count_data <- t(count_data)
subtypePredictions_scmod1 <- molecular.subtyping(sbt.model = 'scmod1',data = count_data,annot = annot,do.mapping = T,verbose = T)
subtypePredictions_scmod2 <- molecular.subtyping(sbt.model = 'scmod2',data = count_data,annot = annot,do.mapping = T,verbose = T)
subtypePredictions_scmgene <- molecular.subtyping(sbt.model = 'scmgene',data = count_data,annot = annot,do.mapping = T,verbose = T)
subtypePredictions_scmod1$subtype
Basals1<-names(which(subtypePredictions_scmod1$subtype == "ER-/HER2-"))
#Select samples pertaining to HER2 Subtype
HER2s1<-names(which(subtypePredictions_scmod1$subtype == "HER2+"))
#Select samples pertaining to Luminal Subtypes
LuminalB1<-names(which(subtypePredictions_scmod1$subtype == "ER+/HER2- High Prolif"))
LuminalA1<-names(which(subtypePredictions_scmod1$subtype == "ER+/HER2- Low Prolif"))
Basals2<-names(which(subtypePredictions_scmod2$subtype == "ER-/HER2-"))
#Select samples pertaining to HER2 Subtype
HER2s2<-names(which(subtypePredictions_scmod2$subtype == "HER2+"))
#Select samples pertaining to Luminal Subtypes
LuminalB2<-names(which(subtypePredictions_scmod2$subtype == "ER+/HER2- High Prolif"))
LuminalA2<-names(which(subtypePredictions_scmod2$subtype == "ER+/HER2- Low Prolif"))
Basals3<-names(which(subtypePredictions_scmgene$subtype == "ER-/HER2-"))
#Select samples pertaining to HER2 Subtype
HER2s3<-names(which(subtypePredictions_scmgene$subtype == "HER2+"))
#Select samples pertaining to Luminal Subtypes
LuminalB3<-names(which(subtypePredictions_scmgene$subtype == "ER+/HER2- High Prolif"))
LuminalA3<-names(which(subtypePredictions_scmgene$subtype == "ER+/HER2- Low Prolif"))
sampledata <- read.csv('br11_filtered_coldata.csv')
rownames(sampledata) <- sampledata$X
sampledata <- sampledata[,2:ncol(sampledata)]
sampledata$scmod1 <- ""
sampledata[Basals1,]$scmod1 <- 'basal'
sampledata[HER2s1,]$scmod1 <- 'her2'
sampledata[LuminalA1,]$scmod1 <- 'lumA'
sampledata[LuminalB1,]$scmod1 <- 'lumB'
sampledata$scmod2 <- ""
sampledata[Basals2,]$scmod2 <- 'basal'
sampledata[HER2s2,]$scmod2 <- 'her2'
sampledata[LuminalA2,]$scmod2 <- 'lumA'
sampledata[LuminalB2,]$scmod2 <- 'lumB'
sampledata$scmgene <- ""
sampledata[Basals3,]$scmgene <- 'basal'
sampledata[HER2s3,]$scmgene <- 'her2'
sampledata[LuminalA3,]$scmgene <- 'lumA'
sampledata[LuminalB3,]$scmgene<- 'lumB'
write.csv(sampledata,'br11_molecular_subtypes_genefu.csv',quote = F)
library('scran')
library('scater')
library('edgeR')
counts <- read.csv('Gkountela_Patient_unprocessed_rawcounts.csv')
rownames(counts) <- counts$Geneid
counts <- counts[,2:ncol(counts)]
counts <- as.matrix(counts)
samples <- grep('Br11',colnames(counts))
br11 <- counts[,samples]
coldata <- read.csv('Gkountela_coldata.csv')
rownames(coldata) <- coldata$X
coldata <- coldata[,2:ncol(coldata)]
coldata11 <- coldata[samples,]
coldata11 <- coldata11[order(coldata11$Sample_Type),]
generate_SampleID <- function(cd){
k=1
for (i in 1:nrow(cd)){
if (i != nrow(cd)){
if (cd$Sample_Type[i] == cd$Sample_Type[i+1]){
type <- cd$Sample_Type[i]
cd$Sample_ID[i] = paste(type,k,sep ="_" )
k=k+1
} else {
cd$Sample_ID[i] = paste(type,k,sep ="_" )
k=1
next
}
}
else{
cd$Sample_ID[i] = paste(type,k,sep ="_" )
}
}
return(cd)
}
coldata11 <- generate_SampleID(coldata11)
#write.csv(coldata11,'coldata11.csv',quote = F)
#### Remove outliers ####
out <- c("CTC-single_2","CTC-single_3","CTC-single_4")
coldata11 <- coldata11[!coldata11$Sample_ID %in% out,]
br11 <- br11[,rownames(coldata11)]
sce <- SingleCellExperiment(assays = list(counts = br11),colData = coldata11)
sce$Sample_Type <- factor(sce$Sample_Type)
sce$Donor <- factor(sce$Donor)
sce@colData
spikes <- grep(rownames(br11),pattern = "^ERCC-",value = T)
spikecounts <- br11[spikes,]
spikein <- SummarizedExperiment(list(counts=spikecounts))
altExp(sce,'spikes') <- spikein
epigenes <- read.csv('../CountMatrix/Epigenes_unique.csv')
qc <- perCellQCMetrics(sce)
reasons <- quickPerCellQC(qc,sub.fields='altexps_spikes_percent')
colSums(as.matrix(reasons))
unfiltered <- sce
colData(unfiltered) <- cbind(colData(unfiltered),qc)
unfiltered$discard <- reasons$discard
colData(unfiltered[,unfiltered$discard])
sce[,unfiltered$discard]
sce <- sce[,!unfiltered$discard]
stats <- perCellQCMetrics(sce)
colData(sce) <- cbind(colData(sce),stats)
#### Normalization ####
set.seed(100)
lib.sf <- librarySizeFactors(sce)
sce <- logNormCounts(sce,size.factors=lib.sf)
assays(sce)
sce.hvgs <- modelGeneVarWithSpikes(sce,'spikes')
sce.hvgs[order(sce.hvgs$bio,decreasing=T),]
chosen.hvgs <- getTopHVGs(sce.hvgs,var.field = 'bio',var.threshold = 1,row.names = T)
sce.hvgs <- sce[chosen.hvgs,]
samples <- colData(sce.hvgs)
samples <- as.data.frame(samples)
out <- c("CTC-single_2","CTC-single_3","CTC-single_4")
samples_new <- samples[!samples$Sample_ID %in% out, ]
groups <- c(1,1,2,2,2,2,2,2)
counts <- counts(sce.hvgs)
y <- DGEList(counts,samples=colData(sce.hvgs),group = groups )
colData(sce.hvgs)
groups <- c(1,1,2,2,2,2,2,2,2)
y <- DGEList(counts,samples=colData(sce.hvgs),group = groups )
y <- calcNormFactors(y)
y <- estimateDisp(y)
et <- exactTest(y)
toptags <- topTags(et)
summary(decideTestsDGE(et))
result <- et$table
result <- result[order(-result$logFC),]
write.csv(result,'scran_results/Br11/new/Br11_noOutliers_edgeR_result.csv',quote = F)
Sigup <- result[result$logFC >= 1 & result$PValue < 0.05,]
SigDown <- result[result$logFC <= -1 &  result$PValue < 0.05,]
SigUpDown <- rbind(Sigup,SigDown)
SigUpDown <- SigUpDown[order(-SigUpDown$logFC),]
write.csv(SigUpDown,'scran_results/Br11/new/Br11_DE_genes_ALL_edgeR.csv',quote = F)
logcpm <- cpm(counts_new,log=T)
epigenes <- read.csv('../CountMatrix/Epigenes_unique.csv')
emt <- read.csv('EMT_genes_unique.csv')
emtUpDown <- merge(SigUpDown,emt,by.x=0,by.y=1)
emtUpDown <- emtUpDown[order(-emtUpDown$logFC),]
write.csv(emtUpDown,'scran_results/Br11/new/br11_emt_genes_edgeR.csv',quote = F,row.names = F)
epiUpDown <- merge(SigUpDown,epigenes,by.x=0,by.y=1)
epiUpDown <- epiUpDown[order(-epiUpDown$logFC),]
write.csv(epiUpDown,'scran_results/Br11/new/br11_epi_genes_edgeR.csv',quote = F,row.names = F)
View(epiUpDown)
