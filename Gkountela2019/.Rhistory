for (i in 1:nrow(cd)){
if (i != nrow(cd)){
if (cd$Sample_Type[i] == cd$Sample_Type[i+1]){
type <- cd$Sample_Type[i]
cd$Sample_ID[i] = paste(type,k,sep ="_" )
k=k+1
} else {
cd$Sample_ID[i] = paste(type,k,sep ="_" )
k=1
next
}
}
else{
cd$Sample_ID[i] = paste(type,k,sep ="_" )
}
}
return(cd)
}
coldata16 <- generate_SampleID(coldata16)
#write.csv(coldata16,'coldata16.csv',quote = F)
#### Create singleCellExperimentObject ####
sce <- SingleCellExperiment(assays = list(counts = br16),colData = coldata16)
sce$Sample_Type <- factor(sce$Sample_Type)
sce$Donor <- factor(sce$Donor)
#sce@colData
#### Adding spike in counts as altexp ####
spikes <- grep(rownames(br16),pattern = "^ERCC-",value = T)
spikecounts <- br16[spikes,]
spikein <- SummarizedExperiment(list(counts=spikecounts))
altExp(sce,'spikes') <- spikein
reasons <- quickPerCellQC(qc,sub.fields='altexps_spikes_percent')
colSums(as.matrix(reasons))
unfiltered <- sce
colData(unfiltered) <- cbind(colData(unfiltered),qc)
colData(unfiltered)
unfiltered$discard <- reasons$discard
colData(unfiltered[,unfiltered$discard])[1,ncol(colData(unfiltered))] = F
colData(sce[,unfiltered$discard])
sce <- sce[,!unfiltered$discard]
sce
stats <- perCellQCMetrics(sce)
colData(sce) <- cbind(colData(sce),stats)
set.seed(100)
lib.sf <- librarySizeFactors(sce)
summary(lib.sf)
sce <- logNormCounts(sce,size.factors=lib.sf)
assays(sce)
sce.hvgs <- modelGeneVarWithSpikes(sce,'spikes')
sce.hvgs[order(sce.hvgs$bio,decreasing=T),]
chosen.hvgs <- getTopHVGs(sce.hvgs,var.field = 'bio',var.threshold = 1,row.names = T)
sce.hvgs <- sce[chosen.hvgs,]
sce.hvgs$Sample_ID
groups <- c(1,1,1,2,2)
y <- DGEList(counts(sce.hvgs),samples=colData(sce.hvgs),group = groups )
y$counts
nrow(y$samples['Sample_Name'])
y <- calcNormFactors(y)
length(y$samples)
sce.hvgs$sizeFactor
ncol(y)
y <- estimateDisp(y)
et <- exactTest(y)
toptags <- topTags(et)
toptags
summary(decideTestsDGE(et))
result <- et$table
result <- result[order(-result$logFC),]
write.csv(result,'Br16_edgeR_result.csv',quote = F,row.names = F)
br16all <- read.csv('Br16_edgeR_result.csv')
br16sigUP <- br16all[br16all$PValue < 0.1 & br16all$logFC >= 1,]
br16sigDown <- br16all[br16all$PValue < 0.1 & br16all$logFC <= -1,]
br16sig <- rbind(br16sigUP,br16sigDown)
br16sig <- br16sig[order(-br16sig$logFC),]
write.csv(br16sig,'scran_results/Br16/br16_pval0.1_edgeR',quote = F)
br11 <- read.csv('scran_results/Br11/br11_pval0.1_edgeR')
br11UP <- read.csv('scran_results/Br11/br11_pval0.1_edgeR')
br11Sig <- read.csv('scran_results/Br11/br11_pval0.1_edgeR')
br16Sig <- read.csv('scran_results/Br16/br16_pval0.1_edgeR')
br7Sig <- read.csv('scran_results/Br7/br7_pval0.1_edgeR')
br61Sig <- read.csv('scran_results/Br61/br61_pval0.1_edgeR')
epigenes <- read.csv('../CountMatrix/Epigenes_unique.csv')
emt <- read.csv('EMT_genes_unique.csv')
FindDEepi <- function(br){
epi<- merge(epigenes,br,by.x = 1,by.y = 1)
return(epi)
}
br11Epi <- FindDEepi(br11Sig)
View(br11Epi)
View(epigenes)
View(br16Sig)
br7all <- read.csv('Br7_edgeR_result.csv',row.names = F)
write.csv(br7sig,'scran_results/Br7/br7_pval0.1_edgeR',row.names = F,quote = F)
write.csv(br11sig,'scran_results/Br11/br11_pval0.1_edgeR',row.names = F,quote = F)
write.csv(br16sig,'scran_results/Br16/br16_pval0.1_edgeR',quote = F,row.names = F)
write.csv(br61sig,'scran_results/Br61/br61_pval0.1_edgeR',quote = F,row.names = F)
br11Sig <- read.csv('scran_results/Br11/br11_pval0.1_edgeR')
br16Sig <- read.csv('scran_results/Br16/br16_pval0.1_edgeR')
br7Sig <- read.csv('scran_results/Br7/br7_pval0.1_edgeR')
br61Sig <- read.csv('scran_results/Br61/br61_pval0.1_edgeR')
br11Epi <- FindDEepi(br11Sig)
View(br11Epi)
View(br11Sig)
View(br11sig)
View(br11Sig)
write.csv(br7sig,'scran_results/Br7/br7_pval0.1_edgeR',quote = F)
row.names(br7sig)
row.names(br7sig) <- br7sig$X
write.csv(br7sig,'scran_results/Br7/br7_pval0.1_edgeR',quote = F)
row.names(br11sig) <- br11sig$X
write.csv(br11sig,'scran_results/Br11/br11_pval0.1_edgeR',quote = F)
write.csv(br11sig,'scran_results/Br11/br11_pval0.1_edgeR',quote = F)
br11all <- read.csv('Br11_edgeR_result.csv')
br11sigUP <- br11all[br11all$PValue < 0.1 & br11all$logFC >= 1,]
br11sigDown <- br11all[br11all$PValue < 0.1 & br11all$logFC <= -1,]
br11sig <- rbind(br11sigUP,br11sigDown)
br11sig <- br11sig[order(-br11sig$logFC),]
row.names(br11sig)
row.names(br11sig) <- br11$X
write.csv(br11sig,'scran_results/Br11/br11_pval0.1_edgeR',rownames=T,quote = F)
write.csv(br11sig,'scran_results/Br11/br11_pval0.1_edgeR',row.names=T,quote = F)
br11Sig <- read.csv('scran_results/Br11/br11_pval0.1_edgeR')
br11Epi <- FindDEepi(br11Sig)
View(br7all)
View(br61all)
library('scran')
library('scater')
library('edgeR')
counts <- read.csv('Gkountela_Patient_unprocessed_rawcounts.csv')
rownames(counts) <- counts$Geneid
counts <- counts[,2:ncol(counts)]
counts <- as.matrix(counts)
#head(counts)
samples <- grep('Br11',colnames(counts))
br11 <- counts[,samples]
#br11
## load sample data ##
coldata <- read.csv('Gkountela_coldata.csv')
rownames(coldata) <- coldata$X
coldata <- coldata[,2:ncol(coldata)]
#coldata
coldata11 <- coldata[samples,]
#coldata11
coldata11 <- coldata11[order(coldata11$Sample_Type),]
generate_SampleID <- function(cd){
k=1
for (i in 1:nrow(cd)){
if (i != nrow(cd)){
if (cd$Sample_Type[i] == cd$Sample_Type[i+1]){
type <- cd$Sample_Type[i]
cd$Sample_ID[i] = paste(type,k,sep ="_" )
k=k+1
} else {
cd$Sample_ID[i] = paste(type,k,sep ="_" )
k=1
next
}
}
else{
cd$Sample_ID[i] = paste(type,k,sep ="_" )
}
}
return(cd)
}
coldata11 <- generate_SampleID(coldata11)
sce <- SingleCellExperiment(assays = list(counts = br11),colData = coldata11)
sce$Sample_Type <- factor(sce$Sample_Type)
sce$Donor <- factor(sce$Donor)
#sce@colData
## Adding spike in counts as altexp ##
spikes <- grep(rownames(br11),pattern = "^ERCC-",value = T)
spikecounts <- br11[spikes,]
spikein <- SummarizedExperiment(list(counts=spikecounts))
altExp(sce,'spikes') <- spikein
qc <- perCellQCMetrics(sce)
#qc
reasons <- quickPerCellQC(qc,sub.fields='altexps_spikes_percent')
colSums(as.matrix(reasons))
unfiltered <- sce
colData(unfiltered) <- cbind(colData(unfiltered),qc)
#colData(unfiltered)
unfiltered$discard <- reasons$discard
sce <- sce[,!unfiltered$discard]
stats <- perCellQCMetrics(sce)
colData(sce) <- cbind(colData(sce),stats)
set.seed(100)
lib.sf <- librarySizeFactors(sce)
#summary(lib.sf)
sce <- logNormCounts(sce,size.factors=lib.sf)
sce.hvgs <- modelGeneVarWithSpikes(sce,'spikes')
sce.hvgs[order(sce.hvgs$bio,decreasing=T),]
chosen.hvgs <- getTopHVGs(sce.hvgs,var.field = 'bio',var.threshold = 1,row.names = T)
sce.hvgs <- sce[chosen.hvgs,]
sce.hvgs$Sample_ID
groups <- c(1,1,2,2,2,2,2,2,2,2,2)
y <- DGEList(counts(sce.hvgs),samples=colData(sce.hvgs),group = groups )
y <- calcNormFactors(y)
y <- estimateDisp(y)
et <- exactTest(y)
toptags <- topTags(et)
result <- et$table
result <- result[order(-result$logFC),]
View(result)
write.csv(result,'Br11_edgeR_result.csv',quote = F)
counts <- read.csv('Gkountela_Patient_unprocessed_rawcounts.csv')
rownames(counts) <- counts$Geneid
counts <- counts[,2:ncol(counts)]
counts <- as.matrix(counts)
head(counts)
samples <- grep('Br16',colnames(counts))
br16 <- counts[,samples]
br16
coldata <- read.csv('Gkountela_coldata.csv')
rownames(coldata) <- coldata$X
coldata <- coldata[,2:ncol(coldata)]
coldata
coldata16 <- coldata[samples,]
coldata16
coldata16 <- coldata16[order(coldata16$Sample_Type),]
generate_SampleID <- function(cd){
k=1
for (i in 1:nrow(cd)){
if (i != nrow(cd)){
if (cd$Sample_Type[i] == cd$Sample_Type[i+1]){
type <- cd$Sample_Type[i]
cd$Sample_ID[i] = paste(type,k,sep ="_" )
k=k+1
} else {
cd$Sample_ID[i] = paste(type,k,sep ="_" )
k=1
next
}
}
else{
cd$Sample_ID[i] = paste(type,k,sep ="_" )
}
}
return(cd)
}
coldata16 <- generate_SampleID(coldata16)
sce <- SingleCellExperiment(assays = list(counts = br16),colData = coldata16)
sce$Sample_Type <- factor(sce$Sample_Type)
sce$Donor <- factor(sce$Donor)
spikes <- grep(rownames(br16),pattern = "^ERCC-",value = T)
spikecounts <- br16[spikes,]
spikein <- SummarizedExperiment(list(counts=spikecounts))
altExp(sce,'spikes') <- spikein
qc <- perCellQCMetrics(sce)
reasons <- quickPerCellQC(qc,sub.fields='altexps_spikes_percent')
colSums(as.matrix(reasons))
unfiltered <- sce
colData(unfiltered) <- cbind(colData(unfiltered),qc)
colData(unfiltered)
unfiltered$discard <- reasons$discard
colData(unfiltered[,unfiltered$discard])[1,ncol(colData(unfiltered))] = F
colData(sce[,unfiltered$discard])
sce <- sce[,!unfiltered$discard]
sce
stats <- perCellQCMetrics(sce)
colData(sce) <- cbind(colData(sce),stats)
##### Normalization #####
set.seed(100)
lib.sf <- librarySizeFactors(sce)
summary(lib.sf)
sce <- logNormCounts(sce,size.factors=lib.sf)
assays(sce)
sce.hvgs <- modelGeneVarWithSpikes(sce,'spikes')
sce.hvgs[order(sce.hvgs$bio,decreasing=T),]
chosen.hvgs <- getTopHVGs(sce.hvgs,var.field = 'bio',var.threshold = 1,row.names = T)
sce.hvgs <- sce[chosen.hvgs,]
sce.hvgs$Sample_ID
groups <- c(1,1,1,2,2)
y <- DGEList(counts(sce.hvgs),samples=colData(sce.hvgs),group = groups )
y$counts
nrow(y$samples['Sample_Name'])
y <- calcNormFactors(y)
length(y$samples)
sce.hvgs$sizeFactor
ncol(y)
y <- estimateDisp(y)
et <- exactTest(y)
toptags <- topTags(et)
toptags
summary(decideTestsDGE(et))
result <- et$table
result <- result[order(-result$logFC),]
write.csv(result,'Br16_edgeR_result.csv',quote = F)
View(result)
counts <- read.csv('Gkountela_Patient_unprocessed_rawcounts.csv')
rownames(counts) <- counts$Geneid
counts <- counts[,2:ncol(counts)]
counts <- as.matrix(counts)
head(counts)
br61 <- grep(colnames(counts),'Br61')
br61 <- counts[,grep('Br61',colnames(counts))]
br61
coldata <- read.csv('coldata61.csv')
rownames(coldata) <- coldata$X
coldata <- coldata[,2:ncol(coldata)]
coldata
sce <- SingleCellExperiment(assays = list(counts = br61),colData = coldata)
sce$Sample_Type <- factor(sce$Sample_Type)
sce$Donor <- factor(sce$Donor)
sce@colData
spikes <- grep(rownames(br61),pattern = "^ERCC-",value = T)
spikecounts <- br61[spikes,]
spikein <- SummarizedExperiment(list(counts=spikecounts))
altExp(sce,'spikes') <- spikein
qc <- perCellQCMetrics(sce)
qc
reasons <- quickPerCellQC(qc,sub.fields='altexps_spikes_percent')
colSums(as.matrix(reasons))
unfiltered <- sce
colData(unfiltered) <- cbind(colData(unfiltered),qc)
colData(unfiltered)
unfiltered$discard <- reasons$discard
colData(unfiltered[,unfiltered$discard])
colData(unfiltered[,unfiltered$discard])[1,ncol(colData(unfiltered))] = F
sce <- sce[,!unfiltered$discard]
stats <- perCellQCMetrics(sce)
colData(sce) <- cbind(colData(sce),stats)
set.seed(100)
lib.sf <- librarySizeFactors(sce)
summary(lib.sf)
sce <- logNormCounts(sce,size.factors=lib.sf)
assays(sce)
sce.hvgs <- modelGeneVarWithSpikes(sce,'spikes')
sce.hvgs[order(sce.hvgs$bio,decreasing=T),]
chosen.hvgs <- getTopHVGs(sce.hvgs,var.field = 'bio',var.threshold = 1,row.names = T)
sce.hvgs <- sce[chosen.hvgs,]
sce.hvgs
counts61 <- counts(sce.hvgs)
groups <- c(1,1,1,1,1,1,1,2,2,2,2,2)
y <- DGEList(counts61,samples=colData(sce.hvgs),group = groups )
y$counts
nrow(y$samples['Sample_Name'])
y <- calcNormFactors(y)
length(y$samples)
sce.hvgs$sizeFactor
ncol(y)
y <- estimateDisp(y)
et <- exactTest(y)
toptags <- topTags(et)
toptags
summary(decideTestsDGE(et))
result <- et$table
result <- result[order(-result$logFC),]
write.csv(result,'Br61_edgeR_result.csv',quote = F)
View(result)
br7all <- read.csv('Br7_edgeR_result.csv')
View(br7all)
row.names(br7all) <- br7all$X
row.names(br11all) <- br11all$X
br11all <- read.csv('Br11_edgeR_result.csv')
row.names(br11all) <- br11all$X
br16all <- read.csv('Br16_edgeR_result.csv')
row.names(br16all) <- br16all$X
br61all <- read.csv('Br61_edgeR_result.csv')
row.names(br61all) <- br61all$X
write.csv(br11sig,'scran_results/Br11/br11_pval0.1_edgeR',quote = F)
br11sig <- br11sig[order(-br11sig$logFC),]
br11all <- read.csv('Br11_edgeR_result.csv')
row.names(br11all) <- br11all$X
br11sigUP <- br11all[br11all$PValue < 0.1 & br11all$logFC >= 1,]
br11sigDown <- br11all[br11all$PValue < 0.1 & br11all$logFC <= -1,]
br11sig <- rbind(br11sigUP,br11sigDown)
br11sig <- br11sig[order(-br11sig$logFC),]
write.csv(br11sig,'scran_results/Br11/br11_pval0.1_edgeR',quote = F)
br16all <- read.csv('Br16_edgeR_result.csv')
row.names(br16all) <- br16all$X
br16sigUP <- br16all[br16all$PValue < 0.1 & br16all$logFC >= 1,]
br16sigDown <- br16all[br16all$PValue < 0.1 & br16all$logFC <= -1,]
br16sig <- rbind(br16sigUP,br16sigDown)
br16sig <- br16sig[order(-br16sig$logFC),]
write.csv(br16sig,'scran_results/Br16/br16_pval0.1_edgeR',quote = F)
br61all <- read.csv('Br61_edgeR_result.csv')
row.names(br61all) <- br61all$X
br61sigUP <- br61all[br61all$PValue < 0.1 & br61all$logFC >= 1,]
br61sigDown <- br61all[br61all$PValue < 0.1 & br61all$logFC <= -1,]
br61sig <- rbind(br61sigUP,br61sigDown)
br61sig <- br61sig[order(-br61sig$logFC),]
write.csv(br61sig,'scran_results/Br61/br61_pval0.1_edgeR',quote = F)
epigenes <- read.csv('../CountMatrix/Epigenes_unique.csv')
emt <- read.csv('EMT_genes_unique.csv')
br7epi <- merge(br7sig,epigenes,by.x=1,by.y=1)
br7all <- read.csv('Br7_edgeR_result.csv')
row.names(br7all) <- br7all$X
br7sigUP <- br7all[br7all$PValue < 0.1 & br7all$logFC >= 1,]
br7sigDown <- br7all[br7all$PValue < 0.1 & br7all$logFC <= -1,]
br7sig <- rbind(br7sigUP,br7sigDown)
br7sig <- br7sig[order(-br7sig$logFC),]
br7epi <- merge(br7sig,epigenes,by.x=1,by.y=1)
View(br7epi)
br11epi <- merge(br11sig,epigenes,by.x=1,by.y=1)
View(br11epi)
write.csv(br7epi,'scran_results/OnlyEpi/br7_epi_pval0.1.csv',row.names = F,quote = F)
write.csv(br11epi,'scran_results/OnlyEpi/br11_epi_pval0.1.csv',row.names = F,quote = F)
br16epi <- merge(br16sig,epigenes,by.x=1,by.y=1)
write.csv(br16epi,'scran_results/OnlyEpi/br16_epi_pval0.1.csv',row.names = F,quote = F)
br61epi <- merge(br61sig,epigenes,by.x=1,by.y=1)
write.csv(br61epi,'scran_results/OnlyEpi/br61_epi_pval0.1.csv',row.names = F,quote = F)
View(br11epi)
View(br16epi)
View(br7epi)
View(br61epi)
br7emt <- merge(br7sig,emt,by.x=1,by.y=1)
View(br7emt)
br7emt <- br7emt[order(-br7emt$logFC),]
write.csv(br7epi,'scran_results/OnlyEMT/br7_emt_pval0.1.csv',row.names = F,quote = F)
View(br7emt)
View(br7emt)
View(br7emt)
br11emt <- merge(br11sig,emt,by.x=1,by.y=1)
br11emt <- br11emt[order(-br11emt$logFC),]
write.csv(br11epi,'scran_results/OnlyEMT/br11_emt_pval0.1.csv',row.names = F,quote = F)
View(br11emt)
br61emt <- merge(br61sig,emt,by.x=1,by.y=1)
br61emt <- br61emt[order(-br61emt$logFC),]
write.csv(br61epi,'scran_results/OnlyEMT/br61_emt_pval0.1.csv',row.names = F,quote = F)
View(br61emt)
br16emt <- merge(br16sig,emt,by.x=1,by.y=1)
br16emt <- br16emt[order(-br61emt$logFC),]
write.csv(br16epi,'scran_results/OnlyEMT/br16_emt_pval0.1.csv',row.names = F,quote = F)
View(br16emt)
br16emt <- br16emt[order(-br16emt$logFC),]
write.csv(br16epi,'scran_results/OnlyEMT/br16_emt_pval0.1.csv',row.names = F,quote = F)
br16emt <- merge(br16sig,emt,by.x=1,by.y=1)
br16emt <- br16emt[order(-br16emt$logFC),]
write.csv(br16epi,'scran_results/OnlyEMT/br16_emt_pval0.1.csv',row.names = F,quote = F)
View(br16emt)
library('scran')
library('scater')
library('edgeR')
## Load Count Data ##
counts <- read.csv('Gkountela_Patient_unprocessed_rawcounts.csv')
rownames(counts) <- counts$Geneid
counts <- counts[,2:ncol(counts)]
counts <- as.matrix(counts)
head(counts)
samples <- grep('Br7',colnames(counts))
br7 <- counts[,samples]
br7
View(counts)
View(br7)
coldata <- read.csv('Gkountela_coldata.csv')
rownames(coldata) <- coldata$X
coldata <- coldata[,2:ncol(coldata)]
coldata
coldata7 <- coldata[samples,]
coldata7
coldata7 <- coldata7[order(coldata7$Sample_Type),]
generate_SampleID <- function(cd){
k=1
for (i in 1:nrow(cd)){
if (i != nrow(cd)){
if (cd$Sample_Type[i] == cd$Sample_Type[i+1]){
type <- cd$Sample_Type[i]
cd$Sample_ID[i] = paste(type,k,sep ="_" )
k=k+1
} else {
cd$Sample_ID[i] = paste(type,k,sep ="_" )
k=1
next
}
}
else{
cd$Sample_ID[i] = paste(type,k,sep ="_" )
}
}
return(cd)
}
coldata7 <- generate_SampleID(coldata7)
View(coldata7)
sce <- SingleCellExperiment(assays = list(counts = br7),colData = coldata7)
sce$Sample_Type <- factor(sce$Sample_Type)
sce$Donor <- factor(sce$Donor)
spikes <- grep(rownames(br7),pattern = "^ERCC-",value = T)
spikecounts <- br7[spikes,]
spikein <- SummarizedExperiment(list(counts=spikecounts))
altExp(sce,'spikes') <- spikein
qc <- perCellQCMetrics(sce)
#qc
reasons <- quickPerCellQC(qc,sub.fields='altexps_spikes_percent')
colSums(as.matrix(reasons))
unfiltered <- sce
colData(unfiltered) <- cbind(colData(unfiltered),qc)
colData(unfiltered)
unfiltered$discard <- reasons$discard
sce <- sce[,!unfiltered$discard]
sce
stats <- perCellQCMetrics(sce)
colData(sce) <- cbind(colData(sce),stats)
set.seed(100)
lib.sf <- librarySizeFactors(sce)
#summary(lib.sf)
sce <- logNormCounts(sce,size.factors=lib.sf)
sce.hvgs <- modelGeneVarWithSpikes(sce,'spikes')
sce.hvgs[order(sce.hvgs$bio,decreasing=T),]
sce.hvgs <- sce[chosen.hvgs,]
chosen.hvgs <- getTopHVGs(sce.hvgs,var.field = 'bio',var.threshold = 1,row.names = T)
sce.hvgs <- sce[chosen.hvgs,]
groups <- c(1,1,2,2)
y <- DGEList(counts(sce.hvgs),samples=colData(sce.hvgs),group = groups )
y <- calcNormFactors(y)
y <- estimateDisp(y)
et <- exactTest(y)
toptags <- topTags(et)
toptags
summary(decideTestsDGE(et))
result <- et$table
result <- result[order(-result$logFC),]
View(result)
write.csv(result,'Br7_edgeR_result.csv',quote=F)
