library('scran')
library('scater')
library('edgeR')
counts <- read.csv('Gkountela_Patient_unprocessed_rawcounts.csv')
rownames(counts) <- counts$Geneid
counts <- counts[,2:ncol(counts)]
counts <- as.matrix(counts)
head(counts)
oldata <- read.csv('Gkountela_coldata.csv')
row.names(coldata) <- coldata$X.Sample_title
coldata <- coldata[,2:ncol(coldata)]
coldata <- read.csv('Gkountela_coldata.csv')
row.names(coldata) <- coldata$X.Sample_title
coldata <- coldata[,2:ncol(coldata)]
sce <- SingleCellExperiment(assays = list(counts = counts),colData = coldata)
sce$Sample_Type <- factor(sce$Sample_Type)
sce$Donor <- factor(sce$Donor)
sce@colData
spikes <- grep(rownames(counts),pattern = "^ERCC-",value = T)
spikecounts <- counts[spikes,]
spikein <- SummarizedExperiment(list(counts=spikecounts))
altExp(sce,'spikes') <- spikein
epigenes <- read.csv('../CountMatrix/Epigenes_unique.csv')
head(epigenes)
epigene_counts <- merge(counts,epigenes,by.x=0,by.y=1)
row.names(epigene_counts) <- epigene_counts$Row.names
epigene_counts <- epigene_counts[,2:ncol(epigene_counts)]
epi_counts <- SummarizedExperiment(list(counts=epigene_counts))
altExp(sce,'epi') <- epi_counts
emt <- read.csv('Meschanchymal markers - Breast_cancer_only.csv',header = F)
colnames(emt)[1]='Geneid'
emt <- emt[,1]
emt <- as.data.frame(emt)
emt <- unique(emt)
head(emt)
emt_counts <- merge(counts,emt,by.x=0,by.y=1)
row.names(emt_counts) <- emt_counts$Row.names
emt_counts <- emt_counts[,2:ncol(emt_counts)]
emt_counts <- SummarizedExperiment(list(counts=emt_counts))
altExp(sce,'emt') <- emt_counts
qc <- perCellQCMetrics(sce)
reasons <- quickPerCellQC(qc,sub.fields='altexps_spikes_percent')
colSums(as.matrix(reasons))
unfiltered <- sce
colData(unfiltered) <- cbind(colData(unfiltered),qc)
colData(unfiltered)
unfiltered$discard <- reasons$discard
sce <- sce[,!reasons$discard]
stats <- perCellQCMetrics(sce)
colData(sce) <- cbind(colData(sce),stats)
##Load libraries
library('scran')
library('scater')
library('edgeR')
##read in count data
counts <- read.csv('Gkountela_Patient_unprocessed_rawcounts.csv')
rownames(counts) <- counts$Geneid
counts <- counts[,2:ncol(counts)]
counts <- as.matrix(counts)
head(counts)
##load sample data
coldata <- read.csv('Gkountela_coldata.csv')
row.names(coldata) <- coldata$X.Sample_title
coldata <- coldata[,2:ncol(coldata)]
### Create singleCellExperimentObject ###
epigenes <- read.csv('../CountMatrix/Epigenes_unique.csv')
epigene_counts
sce.epi <- SingleCellExperiment(assays=list(counts=epigene_counts),colData=coldata)
sce.epi
## Adding spike in counts as altexp ##
spikes <- grep(rownames(counts),pattern = "^ERCC-",value = T)
spikecounts <- counts[spikes,]
spikein <- SummarizedExperiment(list(counts=spikecounts))
altExp(sce.epi,'spikes') <- spikein
counts(sce.epi)
colData(sce.epi)
altExp(sce.epi,'spikes')
## QC ##
qc <- perCellQCMetrics(sce.epi)
qc
reasons <- quickPerCellQC(qc,sub.fields='altexps_spikes_percent')
colSums(as.matrix(reasons))
unfiltered <-(sce.epi)
colData(unfiltered) <- cbind(colData(unfiltered),qc)
colData(unfiltered)
unfiltered$discard <- reasons$discard
epigene_counts <- merge(counts,epigenes,by.x=0,by.y=1)
row.names(epigene_counts) <- epigene_counts$Row.names
epigene_counts <- epigene_counts[,2:ncol(epigene_counts)]
epigenes <- read.csv('../CountMatrix/Epigenes_unique.csv')
epigene_counts <- merge(counts,epigenes,by.x=0,by.y=1)
row.names(epigene_counts) <- epigene_counts$Row.names
epigene_counts <- epigene_counts[,2:ncol(epigene_counts)]
epigene_counts
sce.epi <- SingleCellExperiment(assays=list(counts=epigene_counts),colData=coldata)
sce.epi
spikes <- grep(rownames(counts),pattern = "^ERCC-",value = T)
spikecounts <- counts[spikes,]
spikein <- SummarizedExperiment(list(counts=spikecounts))
altExp(sce.epi,'spikes') <- spikein
counts(sce.epi)
colData(sce.epi)
altExp(sce.epi,'spikes')
qc <- perCellQCMetrics(sce.epi)
qc
reasons <- quickPerCellQC(qc,sub.fields='altexps_spikes_percent')
colSums(as.matrix(reasons))
unfiltered <-(sce.epi)
colData(unfiltered) <- cbind(colData(unfiltered),qc)
colData(unfiltered)
unfiltered$discard <- reasons$discard
gridExtra::grid.arrange(
plotColData(unfiltered, x="Sample_Type", y="sum",
colour_by="discard") + scale_y_log10() + ggtitle("Total count"),
plotColData(unfiltered, x="Sample_Type", y="detected",
colour_by="discard") + scale_y_log10() + ggtitle("Detected features"),
plotColData(unfiltered, x="Sample_Type", y="altexps_spikes_percent",
colour_by="discard") + ggtitle("ERCC percent"),
nrow=1,
ncol=3
)
emt <- read.csv('Meschanchymal markers - Breast_cancer_only.csv',header = F)
colnames(emt)[1]='Geneid'
emt <- emt[,1]
emt <- as.data.frame(emt)
emt <- unique(emt)
head(emt)
emt_counts <- merge(counts,emt,by.x=0,by.y=1)
row.names(emt_counts) <- emt_counts$Row.names
emt_counts <- emt_counts[,2:ncol(emt_counts)]
sce.emt <- SingleCellExperiment(assays=list(counts=emt_counts),colData=coldata)
sce.emt
spikes <- grep(rownames(counts),pattern = "^ERCC-",value = T)
spikecounts <- counts[spikes,]
spikein <- SummarizedExperiment(list(counts=spikecounts))
altExp(sce.emt,'spikes') <- spikein
counts(sce.emt)
colData(sce.emt)
altExp(sce.emt,'spikes')
qc <- perCellQCMetrics(sce.emt)
qc
reasons <- quickPerCellQC(qc,sub.fields='altexps_spikes_percent')
colSums(as.matrix(reasons))
unfiltered <-(sce.emt)
colData(unfiltered) <- cbind(colData(unfiltered),qc)
colData(unfiltered)
unfiltered$discard <- reasons$discard
gridExtra::grid.arrange(
plotColData(unfiltered, x="Sample_Type", y="sum",
colour_by="discard") + scale_y_log10() + ggtitle("Total count"),
plotColData(unfiltered, x="Sample_Type", y="detected",
colour_by="discard") + scale_y_log10() + ggtitle("Detected features"),
plotColData(unfiltered, x="Sample_Type", y="altexps_spikes_percent",
colour_by="discard") + ggtitle("ERCC percent"),
nrow=1,
ncol=3
)
sce.emt <- sce.emt[,!reasons$discard]
stats <- perCellQCMetrics(sce.emt)
colData(sce.emt) <- cbind(colData(sce.emt),stats)
gridExtra::grid.arrange(
plotColData(sce.emt, x="Sample_Type", y="sum",
colour_by="Donor") + scale_y_log10() + ggtitle("Total count"),
plotColData(sce.emt, x="Sample_Type", y="detected",
colour_by="Donor") + scale_y_log10() + ggtitle("Detected features"),
plotColData(sce.emt, x="Sample_Type", y="altexps_spikes_percent",
colour_by="Donor") + ggtitle("ERCC percent"),
nrow=1,
ncol=3
)
### Normalization ###
set.seed(100)
clust <- quickCluster(sce.emt,min.size=5)
summary(clust)
emt.deconv <- calculateSumFactors(sce.emt,cluster=clust)
summary(emt.deconv)
emt.hvgs <- computeSpikeFactors(sce.emt,spikes = 'spikes')
summary(sizeFactors(emt.hvgs))
to.plot <- data.frame(
Deconv=emt.deconv,
libsize=librarySizeFactors(sce.emt),
spike=sizeFactors(emt.hvgs),
CTC_type=emt.hvgs$Sample_Type
)
plot <- ggplot(to.plot, aes(x=Deconv, y=libsize)) +
geom_point() + facet_wrap(~CTC_type) + scale_x_log10() +
scale_y_log10() + geom_abline(intercept=0, slope=1, color="red")
plot
plot2 <- ggplot(to.plot, aes(x=spike, y=libsize)) +
geom_point() + facet_wrap(~CTC_type) + scale_x_log10() +
scale_y_log10() + geom_abline(intercept=0, slope=1, color="red")
plot2
sce.emt <- logNormCounts(sce.emt,size.factors=to.plot$Deconv)
assays(sce.emt)
head(logcounts(sce.emt))
emt.hvgs <- modelGeneVarWithSpikes(sce.emt,'spikes')
emt.hvgs[order(emt.hvgs$bio,decreasing=T),]
plot(emt.hvgs$mean, emt.hvgs$total, xlab="Mean of log-expression",
ylab="Variance of log-expression")
fit.spike <- metadata(emt.hvgs)
metadata(emt.hvgs)
points(fit.spike$mean, fit.spike$var, col="red", pch=16)
curve(fit.spike$trend(x), col="dodgerblue", add=TRUE, lwd=2)
dim(emt.hvgs)
chosen.hvgs <- getTopHVGs(emt.hvgs,var.field = 'bio',var.threshold = 1,row.names = T)
emt.hvgs <- sce.emt[chosen.hvgs,]
emt.hvgs
set.seed(100)
sce.emt <- fixedPCA(sce.emt,subset.row = NULL)
emt.hvgs <- fixedPCA(emt.hvgs,subset.row = NULL)
dim(reducedDim(sce.emt,'PCA'))
dim(reducedDim(emt.hvgs,'PCA'))
percent.var.sce <- attr(reducedDim(sce.emt),'percentVar')
plot(percent.var.sce,log='y',xlab='PC',ylab='Variance explained(%)')
percent.var.hvg <- attr(reducedDim(emt.hvgs),'percentVar')
plot(percent.var.hvg,log='y',xlab='PC',ylab='Variance explained(%)')
library('PCAtools')
chosen.elbow <- findElbowPoint(percent.var.hvg)
chosen.elbow
abline(v=chosen.elbow,col='red')
plot(percent.var.hvg,log='y',xlab='PC',ylab='Variance explained(%)')
chosen.elbow <- findElbowPoint(percent.var.hvg)
chosen.elbow
abline(v=chosen.elbow,col='red')
plot(percent.var.hvg,log='y',xlab='PC',ylab='Variance explained(%)')
abline(v=chosen.elbow,col='red')
plotReducedDim(emt.hvgs,dimred = 'PCA',colour_by = 'Sample_Type')
plotReducedDim(emt.hvgs,dimred = 'PCA',colour_by = 'Donor',shape_by = 'Sample_Type',point_size=2.5)
plotReducedDim(emt.hvgs,dimred = 'PCA',ncomponents = 4,colour_by = 'Donor',shape_by = 'Sample_Type',point_size=2.5)
### T-SNE ###
set.seed(100100)
emt.hvgs <- runTSNE(emt.hvgs,dimred='PCA')
plotReducedDim(emt.hvgs,dimred = 'TSNE',colour_by = 'Donor',shape_by = 'Sample_Type',point_size=3)
wd()
##Load libraries
library('scran')
library('scater')
library('edgeR')
counts <- read.csv('Gkountela_Patient_unprocessed_rawcounts.csv')
rownames(counts) <- counts$Geneid
counts <- counts[,2:ncol(counts)]
counts <- as.matrix(counts)
head(counts)
br61 <- grep(colnames("Br61"))
br61 <- grep(colnames(counts),'Br61')
br61 <- counts[grep('Br61',colnames(counts))]
br61
br61 <- counts[grep('Br61',names(counts))]
br61
br61 <- counts[,grep('Br61',colnames(counts))]
br61
View(br61)
coldata <- read.csv('Gkountela_coldata.csv')
row.names(coldata) <- coldata$X.Sample_title
coldata <- coldata[,2:ncol(coldata)]
coldata
coldata61 <- coldata[grep('Br61',rownames(coldata)),]
coldata61
len(rownames(coldata))
length(rownames(coldata61))
spikes <- grep(rownames(br61),pattern = "^ERCC-",value = T)
spikecounts <- br61[spikes,]
sce <- SingleCellExperiment(assays = list(counts = br61),colData = coldata61)
sce$Donor <- factor(sce$Donor)
sce@colData61
sce@colData
spikes <- grep(rownames(br61),pattern = "^ERCC-",value = T)
spikecounts <- br61[spikes,]
spikein <- SummarizedExperiment(list(counts=spikecounts))
altExp(sce,'spikes') <- spikein
counts(spikein)
count(spikein)
spikein@assays
counts(spikein)
altExps(spikein)
counts(spikes)
counts('spikes')
altExp(sce,'spikes') <- spikein
altExp(sce,'spikes')
counts(sce)
epigenes <- read.csv('../CountMatrix/Epigenes_unique.csv')
head(epigenes)
epigene_counts <- merge(counts,epigenes,by.x=0,by.y=1)
row.names(epigene_counts) <- epigene_counts$Row.names
epigene_counts <- epigene_counts[,2:ncol(epigene_counts)]
epi_counts <- SummarizedExperiment(list(counts=epigene_counts))
altExp(sce,'epi') <- epi_counts
emt <- read.csv('Meschanchymal markers - Breast_cancer_only.csv',header = F)
epigene_counts <- merge(br61,epigenes,by.x=0,by.y=1)
row.names(epigene_counts) <- epigene_counts$Row.names
epigene_counts <- epigene_counts[,2:ncol(epigene_counts)]
epi_counts <- SummarizedExperiment(list(counts=epigene_counts))
altExp(sce,'epi') <- epi_counts
emt <- read.csv('Meschanchymal markers - Breast_cancer_only.csv',header = F)
colnames(emt)[1]='Geneid'
emt <- emt[,1]
emt <- as.data.frame(emt)
emt <- unique(emt)
head(emt)
emt_counts <- merge(br61,emt,by.x=0,by.y=1)
row.names(emt_counts) <- emt_counts$Row.names
emt_counts <- emt_counts[,2:ncol(emt_counts)]
emt_counts <- SummarizedExperiment(list(counts=emt_counts))
altExp(sce,'emt') <- emt_counts
altExp(sce,'emt')
qc <- perCellQCMetrics(sce)
qc
reasons <- quickPerCellQC(qc,sub.fields='altexps_spikes_percent')
colSums(as.matrix(reasons))
unfiltered <- sce
colData(unfiltered) <- cbind(colData(unfiltered),qc)
colData(unfiltered)
unfiltered$discard <- reasons$discard
gridExtra::grid.arrange(
plotColData(unfiltered, x="Sample_Type", y="sum",
colour_by="discard") + scale_y_log10() + ggtitle("Total count"),
plotColData(unfiltered, x="Sample_Type", y="detected",
colour_by="discard") + scale_y_log10() + ggtitle("Detected features"),
plotColData(unfiltered, x="Sample_Type", y="altexps_spikes_percent",
colour_by="discard") + ggtitle("ERCC percent"),
plotColData(unfiltered,x='Sample_Type',y='altexps_epi_percent')+scale_y_log10()+ggtitle('Epigenes_percentage'),
plotColData(unfiltered,x='Sample_Type',y='altexps_emt_percent')+scale_y_log10()+ggtitle('EMTgenes_percentage'),
nrow=2,
ncol=3
)
unfiltered$discard
unfiltered[,reasons$discard]
colData(unfiltered[,reasons$discard])
colData(unfiltered[Br61.CTC.13,reasons$discard])
colData(unfiltered[1,reasons$discard])
sce <- sce[,!c('Br61.CTC.25','Br61.CTC.45')]
sce <- sce[,!('Br61.CTC.25','Br61.CTC.45')]
sce <- subset(sce,select = -c('Br61.CTC.25','Br61.CTC.45'))
sce <- subset(sce,select = -c(Br61.CTC.25,Br61.CTC.45))
sce <- subset(unfiltered,select = -c(Br61.CTC.25,Br61.CTC.45))
sce <- subset(sce,select = -c(Br61.CTC.25,Br61.CTC.45))
sce[,]
sce[,"BRD2"]
sce[,]
unfiltered$discard
unfiltered[,unfiltered$discard]
unfiltered[unfiltered$discard]
unfiltered[,unfiltered$discard]
unfiltered$discard[1]
colData(unfiltered$discard)[1]
colData(unfiltered$discard)
colData(unfiltered[unfiltered$discard])
colData(unfiltered[,unfiltered$discard])
colData(unfiltered[1,unfiltered$discard])
colData(unfiltered[,unfiltered$discard])[1]
colData(unfiltered[,unfiltered$discard])[1,1]
colData(unfiltered[,unfiltered$discard])[3,1]
colData(unfiltered[,unfiltered$discard])[3,ncol(colData(unfiltered))]
colData(unfiltered[,unfiltered$discard])[3,ncol(colData(unfiltered))] == False
colData(unfiltered[,unfiltered$discard])[3,ncol(colData(unfiltered))] = F
sce[,unfiltered$discard]
colData(unfiltered[,unfiltered$discard])[3,ncol(colData(unfiltered))] = T
unfiltered$discard <- reasons$discard
colData(unfiltered[,unfiltered$discard])[3,ncol(colData(unfiltered))]
colData(unfiltered[,unfiltered$discard])[,ncol(colData(unfiltered))]
colData(unfiltered[,unfiltered$discard])[1,ncol(colData(unfiltered))]
colData(unfiltered[,unfiltered$discard])
colData(unfiltered[,unfiltered$discard])[1,ncol(colData(unfiltered))] = F
sce[,unfiltered$discard]
sce <- sce[,!unfiltered$discard]
stats <- perCellQCMetrics(sce)
colData(sce) <- cbind(colData(sce),stats)
gridExtra::grid.arrange(
plotColData(sce, x="Sample_Type", y="sum",
colour_by="Donor") + scale_y_log10() + ggtitle("Total count"),
plotColData(sce, x="Sample_Type", y="detected",
colour_by="Donor") + scale_y_log10() + ggtitle("Detected features"),
plotColData(sce, x="Sample_Type", y="altexps_spikes_percent",
colour_by="Donor") + ggtitle("ERCC percent"),
plotColData(sce,x='Sample_Type',y='altexps_epi_percent',colour_by='Donor')+scale_y_log10()+ggtitle('Epigenes_percentage'),
plotColData(sce,x='Sample_Type',y='altexps_emt_percent',colour_by='Donor')+scale_y_log10()+ggtitle('EMTgenes_percentage'),
nrow=2,
ncol=3
)
### Normalization ###
set.seed(100)
clust <- quickCluster(sce,min.size=5)
summary(clust)
clust <- quickCluster(sce,min.size=5)
clust <- quickCluster(sce,min.size=10)
clust <- quickCluster(sce,min.size=10,svd = T)
clust <- quickCluster(sce,min.size=0)
summary(clust)
clust <- quickCluster(sce,min.size=2)
lib.sf <- librarySizeFactors(sce)
summary(lib.sf)
sce <- logNormCounts(sce,size.factors=lib.sf)
assays(sce)
head(logcounts(sce))
order(logcounts(sce))
sce[,order(logcounts(sce))]
sce[order(logcounts(sce)),]
tail(logcounts(sce))
sce.hvgs <- modelGeneVarWithSpikes(sce,'spikes')
sce.hvgs[order(sce.hvgs$bio,decreasing=T),]
plot(sce.hvgs$mean, sce.hvgs$total, xlab="Mean of log-expression",
ylab="Variance of log-expression")
fit.spike <- metadata(sce.hvgs)
points(fit.spike$mean, fit.spike$var, col="red", pch=16)
curve(fit.spike$trend(x), col="dodgerblue", add=TRUE, lwd=2)
dim(sce.hvgs)
chosen.hvgs <- getTopHVGs(sce.hvgs,var.field = 'bio',var.threshold = 1,row.names = T)
chosen.hvgs
size(chosen.hvgs)
length(chosen.hvgs)
sce <- fixedPCA(sce,subset.row = NULL)
sce.hvgs <- fixedPCA(sce.hvgs,subset.row = NULL)
sce.hvgs <- sce[chosen.hvgs,]
sce.hvgs
set.seed(100)
sce <- fixedPCA(sce,subset.row = NULL)
sce.hvgs <- fixedPCA(sce.hvgs,subset.row = NULL)
dim(reducedDim(sce,'PCA'))
dim(reducedDim(sce.hvgs,'PCA'))
percent.var.sce <- attr(reducedDim(sce),'percentVar')
plot(percent.var.sce,log='y',xlab='PC',ylab='Variance explained(%)')
percent.var.hvg <- attr(reducedDim(sce.hvgs),'percentVar')
plot(percent.var.hvg,log='y',xlab='PC',ylab='Variance explained(%)')
library('PCAtools')
chosen.elbow <- findElbowPoint(percent.var.hvg)
abline(v=chosen.elbow,col='red')
plotReducedDim(sce.hvgs,dimred = 'PCA',colour_by = 'Sample_Type',point_size=2.5)
colData(sce.hvgs)
plotReducedDim(sce.hvgs,dimred = 'PCA',text_by = colnames(colData(sce.hvgs)),shape_by = 'Sample_Type')
plotReducedDim(sce.hvgs,dimred = 'PCA',text_by = 0,shape_by = 'Sample_Type')
plotReducedDim(sce.hvgs,dimred = 'PCA',ncomponents = 3,colour_by = 'Donor',shape_by = 'Sample_Type')
plotReducedDim(sce.hvgs,dimred = 'PCA',colour_by = 'Sample_Type',point_size=2.5)
