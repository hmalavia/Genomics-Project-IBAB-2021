if (i!=nrow(coldata11)){
coldataCopy$Sample_ID[i] = paste(type,k,sep ="_" )
k=1
next
}
}
}
k=1
for (i in 1:(nrow(coldata11)-2)){
if (coldata11$Sample_Type[i] == coldata11$Sample_Type[i+1]){
type <- coldata11$Sample_Type[i+1]
coldataCopy$Sample_ID[i] = paste(type,k,sep ="_" )
k=k+1
} else {
coldataCopy$Sample_ID[i] = paste(type,k,sep ="_" )
k=1
next
}
}
for (i in 1:(nrow(coldata11))){
if (coldata11$Sample_Type[i] == coldata11$Sample_Type[i+1]){
type <- coldata11$Sample_Type[i+1]
coldataCopy$Sample_ID[i] = paste(type,k,sep ="_" )
k=k+1
} else {
coldataCopy$Sample_ID[i] = paste(type,k,sep ="_" )
k=1
next
}
}
k=1
for (i in 1:(nrow(coldata11))){
if (coldata11$Sample_Type[i] == coldata11$Sample_Type[i+1]){
type <- coldata11$Sample_Type[i+1]
coldataCopy$Sample_ID[i] = paste(type,k,sep ="_" )
k=k+1
} else {
coldataCopy$Sample_ID[i] = paste(type,k,sep ="_" )
k=1
next
}
}
k=1
for (i in 1:(nrow(coldata11))){
if (coldata11$Sample_Type[i] == coldata11$Sample_Type[i+1]){
type <- coldata11$Sample_Type[i]
coldataCopy$Sample_ID[i] = paste(type,k,sep ="_" )
k=k+1
} else {
coldataCopy$Sample_ID[i] = paste(type,k,sep ="_" )
k=1
next
}
}
View(coldataCopy)
coldata11$Sample_Type[ncol(coldata11)]
k=1
for (i in 1:(nrow(coldata11))){
if (coldata11$Sample_Type[i] == coldata11$Sample_Type[i+1]){
type <- coldata11$Sample_Type[i]
coldataCopy$Sample_ID[i] = paste(type,k,sep ="_" )
k=k+1
} else {
if (i != ncol(coldata11)){
coldataCopy$Sample_ID[i] = paste(type,k,sep ="_" )
k=1
next
}
}
}
k=1
for (i in 1:(nrow(coldata11))){
if (i != ncol(coldata11)){
if (coldata11$Sample_Type[i] == coldata11$Sample_Type[i+1]){
type <- coldata11$Sample_Type[i]
coldataCopy$Sample_ID[i] = paste(type,k,sep ="_" )
k=k+1
}
} else {
coldataCopy$Sample_ID[i] = paste(type,k,sep ="_" )
k=1
next
}
}
coldataCopy <- coldata11
k=1
for (i in 1:(nrow(coldata11))){
if (i != ncol(coldata11)){
if (coldata11$Sample_Type[i] == coldata11$Sample_Type[i+1]){
type <- coldata11$Sample_Type[i]
coldataCopy$Sample_ID[i] = paste(type,k,sep ="_" )
k=k+1
}
} else {
coldataCopy$Sample_ID[i] = paste(type,k,sep ="_" )
k=1
next
}
}
coldataCopy <- coldata11
k=1
for (i in 1:(nrow(coldata11))){
if (coldata11$Sample_Type[i] == coldata11$Sample_Type[i+1]){
type <- coldata11$Sample_Type[i]
coldataCopy$Sample_ID[i] = paste(type,k,sep ="_" )
k=k+1
} else {
coldataCopy$Sample_ID[i] = paste(type,k,sep ="_" )
k=1
next
}
}
View(coldataCopy)
k=1
for (i in 1:nrow(coldata11)-1){
if (coldata11$Sample_Type[i] == coldata11$Sample_Type[i+1]){
type <- coldata11$Sample_Type[i]
coldataCopy$Sample_ID[i] = paste(type,k,sep ="_" )
k=k+1
} else {
coldataCopy$Sample_ID[i] = paste(type,k,sep ="_" )
k=1
next
}
}
coldataCopy <- coldata11
k=1
for (i in 1:nrow(coldata11)){
if (coldata11$Sample_Type[i] == coldata11$Sample_Type[i+1]){
type <- coldata11$Sample_Type[i]
coldataCopy$Sample_ID[i] = paste(type,k,sep ="_" )
k=k+1
} else {
coldataCopy$Sample_ID[i] = paste(type,k,sep ="_" )
k=1
next
}
}
View(coldataCopy)
k=1
for (i in 1:nrow(coldata11)){
if (i == nrow(coldata11)){
break
}
else{
if (coldata11$Sample_Type[i] == coldata11$Sample_Type[i+1]){
type <- coldata11$Sample_Type[i]
coldataCopy$Sample_ID[i] = paste(type,k,sep ="_" )
k=k+1
} else {
coldataCopy$Sample_ID[i] = paste(type,k,sep ="_" )
k=1
next
}
}
}
coldataCopy <- coldata11
k=1
for (i in 1:nrow(coldata11)){
if (i == nrow(coldata11)){
break
}
else{
if (coldata11$Sample_Type[i] == coldata11$Sample_Type[i+1]){
type <- coldata11$Sample_Type[i]
coldataCopy$Sample_ID[i] = paste(type,k,sep ="_" )
k=k+1
} else {
coldataCopy$Sample_ID[i] = paste(type,k,sep ="_" )
k=1
next
}
}
}
View(coldataCopy)
k=1
for (i in 1:nrow(coldata11)){
if (i != nrow(coldata11)){
if (coldata11$Sample_Type[i] == coldata11$Sample_Type[i+1]){
type <- coldata11$Sample_Type[i]
coldataCopy$Sample_ID[i] = paste(type,k,sep ="_" )
k=k+1
} else {
coldataCopy$Sample_ID[i] = paste(type,k,sep ="_" )
k=1
next
}
}
}
View(coldataCopy)
View(coldata11)
coldataCopy <- coldata11
k=1
for (i in 1:nrow(coldataCopy)){
if (i != nrow(coldataCopy)){
if (coldataCopy$Sample_Type[i] == coldataCopy$Sample_Type[i+1]){
type <- coldataCopy$Sample_Type[i]
coldataCopy$Sample_ID[i] = paste(type,k,sep ="_" )
k=k+1
} else {
coldataCopy$Sample_ID[i] = paste(type,k,sep ="_" )
k=1
next
}
}
}
View(coldataCopy)
coldataCopy <- coldata11
k=1
for (i in 1:nrow(coldataCopy)){
if (i != nrow(coldataCopy)){
if (coldataCopy$Sample_Type[i] == coldataCopy$Sample_Type[i+1]){
type <- coldataCopy$Sample_Type[i]
coldataCopy$Sample_ID[i] = paste(type,k,sep ="_" )
k=k+1
} else {
coldataCopy$Sample_ID[i] = paste(type,k,sep ="_" )
k=1
next
}
}
else{
coldataCopy$Sample_ID[i] = paste(type,k,sep ="_" )
}
}
write.csv(coldata11,'coldata11.csv',quote = F)
for (i in 1:nrow(coldata11)){
if (i != nrow(coldata11)){
if (coldata11$Sample_Type[i] == coldata11$Sample_Type[i+1]){
type <- coldata11$Sample_Type[i]
coldata11$Sample_ID[i] = paste(type,k,sep ="_" )
k=k+1
} else {
coldata11$Sample_ID[i] = paste(type,k,sep ="_" )
k=1
next
}
}
else{
coldata11$Sample_ID[i] = paste(type,k,sep ="_" )
}
}
coldata11 <- coldata[samples,]
coldata11
coldata11 <- coldata11[order(coldata11$Sample_Type),]
k=1
for (i in 1:nrow(coldata11)){
if (i != nrow(coldata11)){
if (coldata11$Sample_Type[i] == coldata11$Sample_Type[i+1]){
type <- coldata11$Sample_Type[i]
coldata11$Sample_ID[i] = paste(type,k,sep ="_" )
k=k+1
} else {
coldata11$Sample_ID[i] = paste(type,k,sep ="_" )
k=1
next
}
}
else{
coldata11$Sample_ID[i] = paste(type,k,sep ="_" )
}
}
coldata11$Sample_Type[i] == coldata11$Sample_Type[i+1]
rm(coldataCopy)
coldataCopy <- coldata11
generate_SampleID <- function(cd){
k=1
for (i in 1:nrow(cd)){
if (i != nrow(cd)){
if (cd$Sample_Type[i] == cd$Sample_Type[i+1]){
type <- cd$Sample_Type[i]
cd$Sample_ID[i] = paste(type,k,sep ="_" )
k=k+1
} else {
cd$Sample_ID[i] = paste(type,k,sep ="_" )
k=1
next
}
}
else{
cd$Sample_ID[i] = paste(type,k,sep ="_" )
}
}
return(cd)
}
coldataCopy <- generate_SampleID(coldataCopy)
View(coldataCopy)
View(coldata11)
sce <- SingleCellExperiment(assays = list(counts = br11),colData = coldata11)
sce$Sample_Type <- factor(sce$Sample_Type)
sce$Donor <- factor(sce$Donor)
sce@colData
spikes <- grep(rownames(br11),pattern = "^ERCC-",value = T)
spikecounts <- br11[spikes,]
spikein <- SummarizedExperiment(list(counts=spikecounts))
altExp(sce,'spikes') <- spikein
epigenes <- read.csv('../CountMatrix/Epigenes_unique.csv')
head(epigenes)
epigene_counts <- merge(br11,epigenes,by.x=0,by.y=1)
row.names(epigene_counts) <- epigene_counts$Row.names
epigene_counts <- epigene_counts[,2:ncol(epigene_counts)]
epi_counts <- SummarizedExperiment(list(counts=epigene_counts))
altExp(sce,'epi') <- epi_counts
emt <- read.csv('Meschanchymal markers - Breast_cancer_only.csv',header = F)
colnames(emt)[1]='Geneid'
emt <- emt[,1]
emt <- as.data.frame(emt)
emt <- unique(emt)
head(emt)
emt_counts <- merge(br11,emt,by.x=0,by.y=1)
row.names(emt_counts) <- emt_counts$Row.names
emt_counts <- emt_counts[,2:ncol(emt_counts)]
emt_counts <- SummarizedExperiment(list(counts=emt_counts))
altExp(sce,'emt') <- emt_counts
altExp(sce,'emt')
qc <- perCellQCMetrics(sce)
qc
reasons <- quickPerCellQC(qc,sub.fields='altexps_spikes_percent')
colSums(as.matrix(reasons))
unfiltered <- sce
colData(unfiltered) <- cbind(colData(unfiltered),qc)
colData(unfiltered)
unfiltered$discard <- reasons$discard
colData(unfiltered[,unfiltered$discard])
gridExtra::grid.arrange(
plotColData(unfiltered, x="Sample_Type", y="sum",
colour_by="discard") + scale_y_log10() + ggtitle("Total count"),
plotColData(unfiltered, x="Sample_Type", y="detected",
colour_by="discard") + scale_y_log10() + ggtitle("Detected features"),
plotColData(unfiltered, x="Sample_Type", y="altexps_spikes_percent",
colour_by="discard") + ggtitle("ERCC percent"),
plotColData(unfiltered,x='Sample_Type',y='altexps_epi_percent')+scale_y_log10()+ggtitle('Epigenes_percentage'),
plotColData(unfiltered,x='Sample_Type',y='altexps_emt_percent')+scale_y_log10()+ggtitle('EMTgenes_percentage'),
nrow=2,
ncol=3
)
View(coldata11)
sce <- sce[,!unfiltered$discard]
stats <- perCellQCMetrics(sce)
colData(sce) <- cbind(colData(sce),stats)
gridExtra::grid.arrange(
plotColData(sce, x="Sample_Type", y="sum",
colour_by="Donor") + scale_y_log10() + ggtitle("Total count"),
plotColData(sce, x="Sample_Type", y="detected",
colour_by="Donor") + scale_y_log10() + ggtitle("Detected features"),
plotColData(sce, x="Sample_Type", y="altexps_spikes_percent",
colour_by="Donor") + ggtitle("ERCC percent"),
plotColData(sce,x='Sample_Type',y='altexps_epi_percent',colour_by='Donor')+scale_y_log10()+ggtitle('Epigenes_percentage'),
plotColData(sce,x='Sample_Type',y='altexps_emt_percent',colour_by='Donor')+scale_y_log10()+ggtitle('EMTgenes_percentage'),
nrow=2,
ncol=3
)
### Normalization ###
set.seed(100)
lib.sf <- librarySizeFactors(sce)
summary(lib.sf)
sce <- logNormCounts(sce,size.factors=lib.sf)
assays(sce)
sce.hvgs <- modelGeneVarWithSpikes(sce,'spikes')
sce.hvgs[order(sce.hvgs$bio,decreasing=T),]
plot(sce.hvgs$mean, sce.hvgs$total, xlab="Mean of log-expression",
ylab="Variance of log-expression")
fit.spike <- metadata(sce.hvgs)
points(fit.spike$mean, fit.spike$var, col="red", pch=16)
curve(fit.spike$trend(x), col="dodgerblue", add=TRUE, lwd=2)
dim(sce.hvgs)
chosen.hvgs <- getTopHVGs(sce.hvgs,var.field = 'bio',var.threshold = 1,row.names = T)
length(chosen.hvgs)
sce.hvgs <- sce[chosen.hvgs,]
sce.hvgs
set.seed(100)
sce <- fixedPCA(sce,subset.row = NULL)
sce.hvgs <- fixedPCA(sce.hvgs,subset.row = NULL)
set.seed(100)
dim(reducedDim(sce,'PCA'))
dim(reducedDim(sce.hvgs,'PCA'))
percent.var.sce <- attr(reducedDim(sce),'percentVar')
plot(percent.var.sce,log='y',xlab='PC',ylab='Variance explained(%)')
percent.var.hvg <- attr(reducedDim(sce.hvgs),'percentVar')
plot(percent.var.hvg,log='y',xlab='PC',ylab='Variance explained(%)')
plotReducedDim(sce.hvgs,dimred = 'PCA',colour_by = 'Sample_Type',point_size=2.5)
plotReducedDim(sce.hvgs,dimred = 'PCA',colour_by = 'Sample_Type',point_size=2.5,text_by = 'Sample_Name')
View(coldata11)
plotReducedDim(sce.hvgs,dimred = 'PCA',colour_by = 'Sample_Type',point_size=2.5,text_by = 'Sample_ID')
plotReducedDim(sce.hvgs,dimred = 'PCA',colour_by = 'Sample_Type',point_size=2.5,text_by = 'Sample_ID',text_size = 2.5)
plotReducedDim(sce.hvgs,dimred = 'PCA',ncomponents = 4,colour_by = 'Sample_Type',shape_by = 'Sample_Type', point_size=2.5)
plotReducedDim(sce.hvgs,dimred = 'PCA', ncomponents=c(1,3), colour_by='Sample_Type', shape_by = 'Sample_Type',point_size=2.5,text_by = 'Sample_ID',text_size = 2.5)
plotReducedDim(sce.hvgs,dimred = 'PCA', ncomponents=c(1,3), colour_by='Sample_Type', shape_by = 'Sample_Type',point_size=2.5)
### T-SNE ###
set.seed(100100)
sce.hvgs <- runTSNE(sce.hvgs,dimred='PCA')
plotReducedDim(sce.hvgs,dimred = 'TSNE',colour_by = 'Sample_Type',shape_by = 'Sample_Type', point_size=2.5)
plotReducedDim(sce.hvgs,dimred = 'TSNE',colour_by = 'Sample_Type',shape_by = 'Sample_Type', point_size=2.5,text_by = 'Sample_ID',text_size = 2.5)
### Varying Perplexity for T-SNE ###
set.seed(100)
sce.hvgs <- runTSNE(sce.hvgs, dimred="PCA", perplexity=5)
out5 <- plotReducedDim(sce.hvgs, dimred="TSNE",
colour_by="Sample_Type",shape_by = 'Sample_Type', point_size=2.5) + ggtitle("perplexity = 5")
set.seed(100)
sce.hvgs <- runTSNE(sce.hvgs, dimred="PCA", perplexity=20)
out20 <- plotReducedDim(sce.hvgs, dimred="TSNE",
colour_by="Sample_Type",shape_by = 'Sample_Type', point_size=2.5) + ggtitle("perplexity = 20")
set.seed(100)
sce.hvgs <- runTSNE(sce.hvgs, dimred="PCA", perplexity=80)
out80 <- plotReducedDim(sce.hvgs, dimred="TSNE",
colour_by="Sample_Type",shape_by = 'Sample_Type', point_size=2.5) + ggtitle("perplexity = 80")
gridExtra::grid.arrange(out5, out20, out80, ncol=3)
library(bluster)
clust.walktrap_rank <- clusterCells(sce.hvgs,use.dimred='PCA',
BLUSPARAM = SNNGraphParam(k=4, type = 'rank', cluster.fun = 'walktrap'))
table(clust.walktrap_rank)
plotReducedDim(sce.hvgs,'PCA',colour_by = 'label',shape_by='Sample_Type',point_size=2.5)
clust.louvain_jaccard <- clusterCells(sce.hvgs,use.dimred='PCA',
BLUSPARAM = SNNGraphParam(k=4, type = 'jaccard', cluster.fun = 'louvain'))
table(clust.louvain_jaccard)
colLabels(sce.hvgs) <- clust.louvain_jaccard
clust.louvain_jaccard
plotReducedDim(sce.hvgs,'PCA',colour_by = 'label',shape_by='Sample_Type',point_size=2.5)
library('edgeR')
coldata11
groups <- c(1,1,2,2,2,2,2,2,2,2)
y <- DGEList(counts(sce.hvgs),samples=colData(sce.hvgs),group = groups )
View(coldata11)
sce.hvgs$Sample_ID
groups <- c(1,1,2,2,2,2,2,2,2,2,2)
y <- DGEList(counts(sce.hvgs),samples=colData(sce.hvgs),group = groups )
y$counts
y <- calcNormFactors(y)
sce.hvgs$sizeFactor
## MD plot ##
par(mfrow=c(3,4))
for (i in seq_len(ncol(y))) {
plotMD(y, column=i)
}
y <- estimateDisp(y)
et <- exactTest(y)
toptags <- topTags(et)
toptags
summary(decideTestsDGE(et))
counts61['ALDH3A1']
br11['ALDH3A1']
br11['ALDH3A1',]
View(et)
result <- et$table
result <- result[order(-result$logFC),]
upreg <- result[result$logFC > 2 & result$PValue < 0.05,]
Downregs <- result[result$logFC < -2 &  result$PValue < 0.05,]
View(Downregs)
br11['GAS5',]
upreg <- upreg[order(-upreg$logFC),]
write.csv(upreg,'scran_results/Br61_upregulated_genes_ALL_edgeR.csv',quote = F)
write.csv(upreg,'scran_results/Br11_upregulated_genes_ALL_edgeR.csv',quote = F)
Downregs <- Downregs[order(Downregs$logFC),]
write.csv(Downregs,'scran_results/Br11_downregulated_genes_ALL_edgeR.csv',quote = F)
logcpm <- cpm(counts61,log=T)
logUp <- logcpm[Sigup,]
logDown <- logcpm[Sigdown,]
logcpm <- cpm(br11,log=T)
logUp <- logcpm[Sigup,]
logUp <- logcpm[rownames(upreg),]
logDown <- logcpm[rownames(Downregs),]
View(logUp)
colnames(logUp) <- new_col_names
new_col_names <- sce.hvgs$Sample_ID
sce.hvgs$Sample_ID
colnames(logUp) <- new_col_names
sce.hvgs$Sample_ID
y <- DGEList(counts(sce.hvgs),samples=colData(sce.hvgs),group = groups )
y$counts
y <- calcNormFactors(y)
y <- estimateDisp(y)
et <- exactTest(y)
toptags <- topTags(et)
toptags
summary(decideTestsDGE(et))
result <- et$table
result <- result[order(-result$logFC),]
upreg <- result[result$logFC > 2 & result$PValue < 0.05,]
Downregs <- result[result$logFC < -2 &  result$PValue < 0.05,]
upreg <- upreg[order(-upreg$logFC),]
write.csv(upreg,'scran_results/Br11_upregulated_genes_ALL_edgeR.csv',quote = F)
Downregs <- Downregs[order(Downregs$logFC),]
write.csv(Downregs,'scran_results/Br11_downregulated_genes_ALL_edgeR.csv',quote = F)
logcpm <- cpm(counts(sce.hvgs),log=T)
logUp <- logcpm[Sigup,]
logUp <- logcpm[rownames(upreg),]
View(logUp)
logDown <- logcpm[rownames(Downregs),]
new_col_names <- sce.hvgs$Sample_ID
colnames(logUp) <- new_col_names
View(logUp)
colnames(logDown) <- new_col_names
Updown <- rbind(logUp,logDown)
library('pheatmap')
pheatmap(as.matrix(Updown))
View(result)
View(upreg)
View(logUp)
View(logDown)
Updown <- rbind(logUp,logDown[:15])
Updown <- rbind(logUp,logDown[:15,])
Updown <- rbind(logUp,logDown[0:15,])
pheatmap(as.matrix(Updown))
View(logUp)
View(upreg)
View(logUp)
View(Downregs)
View(Downregs)
View(logDown)
Updown <- rbind(logUp,logDown[0:10])
Updown <- rbind(logUp,logDown[0:10,])
pheatmap(as.matrix(Updown))
